Main.cpp:	//ptr_gSAIGEobj->m_XV_gxe_mt = t_XV_gxe;
Main.cpp:	//ptr_gSAIGEobj->m_XXVX_inv_gxe_mt = t_XXVX_inv_gxe;
Main.cpp:	//ptr_gSAIGEobj->m_y_gxe_mt = t_y_gxe;
Main.cpp:	//ptr_gSAIGEobj->m_res_gxe_mt = t_res_gxe;
Main.cpp:	//ptr_gSAIGEobj->m_mu2_gxe_mt = t_mu2_gxe;
Main.cpp:	//ptr_gSAIGEobj->m_mu_gxe_mt = t_mu_gxe;
Main.cpp:	//ptr_gSAIGEobj->m_varWeights_gxe_mt = t_varWeights_gxe;
Main.cpp:  //std::cout << "ptr_gSAIGEobj->m_flagSparseGRM_cur " << ptr_gSAIGEobj->m_flagSparseGRM_cur << std::endl;
Main.cpp:  //std::cout << "ptr_gSAIGEobj->m_flagSparseGRM " << ptr_gSAIGEobj->m_flagSparseGRM << std::endl;
Main.cpp:  bool isCondition = ptr_gSAIGEobj->m_isCondition;
Main.cpp:  arma::rowvec G1tilde_P_G2tilde_Vec(ptr_gSAIGEobj->m_numMarker_cond);
Main.cpp:  //int n = ptr_gSAIGEobj->m_n;
Main.cpp:  int n = ptr_gSAIGEobj->m_n;
Main.cpp:  if(ptr_gSAIGEobj->m_isFastTest){
Main.cpp:    ptr_gSAIGEobj->set_flagSparseGRM_cur(false);
Main.cpp:    ptr_gSAIGEobj->set_flagSparseGRM_cur(ptr_gSAIGEobj->m_flagSparseGRM); 
Main.cpp:  std::cout << "ptr_gSAIGEobj->m_varRatio_null_mt.n_rows " << ptr_gSAIGEobj->m_varRatio_null_mt.n_rows << std::endl;
Main.cpp:  if(ptr_gSAIGEobj->m_varRatio_null_mt.n_rows == 1){
Main.cpp:        //ptr_gSAIGEobj->assignSingleVarianceRatio(ptr_gSAIGEobj->m_flagSparseGRM_cur, true);
Main.cpp:        //ptr_gSAIGEobj->assignSingleVarianceRatio(false);
Main.cpp:    //ptr_gSAIGEobj->set_flagSparseGRM_cur(m_isSparseGRM);
Main.cpp:    //if(ptr_gSAIGEobj->m_isnoadjCov){    
Main.cpp:std::cout << "ptr_gSAIGEobj->m_isCondition " << ptr_gSAIGEobj->m_isCondition << std::endl;
Main.cpp:if(g_isgxe && ptr_gSAIGEobj->m_isCondition){
Main.cpp:    if(ptr_gSAIGEobj->m_isCondition){
Main.cpp:                ptr_gSAIGEobj->m_numMarker_cond = (ptr_gSAIGEobj->m_condition_genoIndex).size();
Main.cpp:                ptr_gSAIGEobj->m_numMarker_cond = 0;
Main.cpp:  ptr_gSAIGEobj->assign_for_itrait(i_mt);
Main.cpp:    //ptr_gSAIGEobj->assign_for_trait_i(i_mt);
Main.cpp:    ptr_gSAIGEobj->set_flagSparseGRM_cur(false);		
Main.cpp:       ptr_gSAIGEobj->assignSingleVarianceRatio(ptr_gSAIGEobj->m_flagSparseGRM_cur, true);
Main.cpp:       hasVarRatio = ptr_gSAIGEobj->assignVarianceRatio(MAC, ptr_gSAIGEobj->m_flagSparseGRM_cur, true);
Main.cpp:  //std::cout << "ptr_gSAIGEobj->m_flagSparseGRM_cur " << ptr_gSAIGEobj->m_flagSparseGRM_cur << std::endl;
Main.cpp:    if(ptr_gSAIGEobj->m_flagSparseGRM_cur && ptr_gSAIGEobj->m_SigmaMat_sp.n_rows == 2){
Main.cpp:	ptr_gSAIGEobj->getadjGFast(t_GVec0, gtildeVec, indexNonZeroVec_arma);    
Main.cpp:	arma::fvec tauvec_f = arma::conv_to< arma::fvec >::from(ptr_gSAIGEobj->m_tauvec);
Main.cpp:	arma::fvec m_mu2_f = arma::conv_to< arma::fvec >::from(ptr_gSAIGEobj->m_mu2);
Main.cpp:	ptr_gSAIGEobj->m_sigmainvG_noV = arma::conv_to< arma::vec >::from(sigmainvG_noV_vec);
Main.cpp:    //std::cout << "ptr_gSAIGEobj->m_pval_cutoff_for_fastTest " << ptr_gSAIGEobj->m_pval_cutoff_for_fastTest << std::endl;
Main.cpp:    if(pval < (ptr_gSAIGEobj->m_pval_cutoff_for_fastTest)){
Main.cpp:       //ptr_gSAIGEobj->set_flagSparseGRM_cur(true);
Main.cpp:       ptr_gSAIGEobj->set_flagSparseGRM_cur(ptr_gSAIGEobj->m_flagSparseGRM);
Main.cpp:         ptr_gSAIGEobj->assignSingleVarianceRatio(ptr_gSAIGEobj->m_flagSparseGRM_cur, false);
Main.cpp:         hasVarRatio = ptr_gSAIGEobj->assignVarianceRatio(MAC, ptr_gSAIGEobj->m_flagSparseGRM_cur, false);
Main.cpp:       if(ptr_gSAIGEobj->m_flagSparseGRM_cur && ptr_gSAIGEobj->m_SigmaMat_sp.n_rows == 2){
Main.cpp:         ptr_gSAIGEobj->getadjGFast(t_GVec0, gtildeVec, indexNonZeroVec_arma);
Main.cpp:         arma::fvec tauvec_f = arma::conv_to< arma::fvec >::from(ptr_gSAIGEobj->m_tauvec);
Main.cpp:         arma::fvec m_mu2_f = arma::conv_to< arma::fvec >::from(ptr_gSAIGEobj->m_mu2);
Main.cpp:         ptr_gSAIGEobj->m_sigmainvG_noV = arma::conv_to< arma::vec >::from(sigmainvG_noV_vec);	
Main.cpp:                          altFreq, isSPAConverge, gtildeVec, is_gtilde, is_region, t_P2Vec, isCondition, Beta_c, seBeta_c, pval_c, pval_noSPA_c, Tstat_c, varT_c, G1tilde_P_G2tilde_Vec, is_Firth, is_FirthConverge, false, false, ptr_gSAIGEobj->m_flagSparseGRM_cur);
Main.cpp:               ptr_gSAIGEobj->assign_for_itrait_binaryindices(i_mt);
Main.cpp:      arma::vec dosage_case = t_GVec.elem(ptr_gSAIGEobj->m_case_indices);
Main.cpp:      arma::vec dosage_ctrl = t_GVec.elem(ptr_gSAIGEobj->m_ctrl_indices);
Main.cpp:	if((ptr_gSAIGEobj->g_I_longl_mat.n_cols != ptr_gSAIGEobj->g_I_longl_mat.n_rows) && (t_GVec.n_elem < ptr_gSAIGEobj->m_y_gxe_mt.n_rows)){
Main.cpp:		t_GVec1 = (ptr_gSAIGEobj->g_I_longl_mat) * t_GVec;
Main.cpp:	if((ptr_gSAIGEobj->g_I_longl_mat.n_cols != ptr_gSAIGEobj->g_I_longl_mat.n_rows) && (t_GVec.n_elem < ptr_gSAIGEobj->m_y_gxe_mt.n_rows)){
Main.cpp:	//if(t_GVec.n_elem < ptr_gSAIGEobj->m_y.n_elem){
Main.cpp:	        //t_GVec1 = ptr_gSAIGEobj->g_I_longl_mat * t_GVec;
Main.cpp:                ptr_gSAIGEobj->getadjGFast_gxe(t_GVec1, gtildeVec, indexNonZeroVec_arma);
Main.cpp:                	ptr_gSAIGEobj->getadjGFast_gxe(t_GVec1, gtildeVec, indexNonZeroVec_arma);
Main.cpp:	std::cout << "(ptr_gSAIGEobj->m_mu2_gxe_mt) " << (ptr_gSAIGEobj->m_mu2_gxe_mt).n_rows << " " << (ptr_gSAIGEobj->m_mu2_gxe_mt).n_cols << std::endl;
Main.cpp:                if(!ptr_gSAIGEobj->m_flagSparseGRM_cur){
Main.cpp:                        t_P2Vec = gtildeVec % ((ptr_gSAIGEobj->m_mu2_gxe_mt).col(i_mt)) *((ptr_gSAIGEobj->m_tauvec_mt)(0,i_mt));
Main.cpp:                        t_P2Vec = ptr_gSAIGEobj->getSigma_G_V(gtildeVec, 500, 1e-5);
Main.cpp:	P2Mat_g.col(0) = sqrt(ptr_gSAIGEobj->m_varRatioVal)*t_P2Vec;
Main.cpp:	VarMat_g = sqrt(ptr_gSAIGEobj->m_varRatioVal)*gtildeVec.t() * P2Mat_g;
Main.cpp:  	ptr_gSAIGEobj->assignConditionFactors(
Main.cpp:	ptr_gSAIGEobj->assign_for_itrait(i_mt);				
Main.cpp:	//(ptr_gSAIGEobj->m_varRatio_null_eg).print("ptr_gSAIGEobj->m_varRatio_null_eg");
Main.cpp:	    if(!ptr_gSAIGEobj->m_flagSparseGRM_cur){
Main.cpp:	    	ptr_gSAIGEobj->m_varRatioVal = ptr_gSAIGEobj->m_varRatio_null_eg_mt(k,i_mt);		
Main.cpp:	//	ptr_gSAIGEobj->m_varRatio_null_eg(k);
Main.cpp:	    	ptr_gSAIGEobj->m_varRatioVal =  ptr_gSAIGEobj->m_varRatio_sparse_eg_mt(k,i_mt);
Main.cpp:	//	ptr_gSAIGEobj->m_varRatioVal = ptr_gSAIGEobj->m_varRatio_sparse_eg(k);
Main.cpp:	std::cout << "ptr_gSAIGEobj->m_varRatioVa " << ptr_gSAIGEobj->m_varRatioVal << std::endl;
Main.cpp://	     		P1Matge.row(k) = sqrt(ptr_gSAIGEobj->m_varRatioVal)*(gtildeVec_ge.t());
Main.cpp://                if(!ptr_gSAIGEobj->m_flagSparseGRM_cur){
Main.cpp://                        t_P2Vec_ge = gtildeVec_ge % ((ptr_gSAIGEobj->m_mu2_gxe_mt).col(i_mt)) *((ptr_gSAIGEobj->m_tauvec_mt)(0,i_mt));
Main.cpp://                        t_P2Vec_ge = ptr_gSAIGEobj->getSigma_G_V(gtildeVec_ge, 500, 1e-5);
Main.cpp://	     P2Matge.col(k) = sqrt(ptr_gSAIGEobj->m_varRatioVal)*t_P2Vec_ge;
Main.cpp:  //arma::vec GVec(ptr_gSAIGEobj->m_n);
Main.cpp:    ptr_gSAIGEobj->getMarkerPval(t_GVec, t_indexForNonZero_vec, t_indexForZero_vec, t_Beta, t_seBeta, t_pval, t_pval_noSPA, t_altFreq, t_Tstat, t_gy, t_varT, t_isSPAConverge, t_gtilde, is_gtilde, is_region, t_P2Vec, t_isCondition, t_Beta_c, t_seBeta_c, t_pval_c, t_pval_noSPA_c, t_Tstat_c, t_varT_c, t_G1tilde_P_G2tilde_Vec, t_isFirth, t_isFirthConverge, t_isER, t_isnoadjCov, t_isSparseGRM); //SAIGE_new.cpp
Main.cpp:    ptr_gSAIGEobj->getMarkerPval_gxe(t_GVec, t_indexForNonZero_vec, t_indexForZero_vec, t_Beta, t_seBeta, t_pval, t_pval_noSPA, t_altFreq, t_Tstat, t_gy, t_varT, t_isSPAConverge, t_gtilde, is_gtilde, is_region, t_P2Vec, t_isCondition, t_Beta_c, t_seBeta_c, t_pval_c, t_pval_noSPA_c, t_Tstat_c, t_varT_c, t_G1tilde_P_G2tilde_Vec, t_isFirth, t_isFirthConverge, t_isER, t_isnoadjCov, t_isSparseGRM); //SAIGE_new.cpp
Main.cpp:  //ptr_gSAIGEobj->m_flagSparseGRM = false;
Main.cpp:  ptr_gSAIGEobj->setupSparseMat(r, t_locationMatinR, t_valueVecinR);
Main.cpp:  ptr_gSAIGEobj->m_flagSparseGRM = true;
Main.cpp:	unsigned int q_cond = (ptr_gSAIGEobj->m_VarInvMat_cond).n_rows;
Main.cpp:                //	MAFG2_cond = (ptr_gSAIGEobj->m_MAF_cond)[ci];
Main.cpp:	unsigned int nt = ptr_gSAIGEobj->m_traitType_vec.size();
Main.cpp:		VarMat_weighted_cond_sub = woG2Mat_cond % ((ptr_gSAIGEobj->m_VarMat_cond).cols(startimt, endimt));
Main.cpp:                                          Rcpp::Named("Score_G2_cond") = ptr_gSAIGEobj->m_Tstat_cond,
Main.cpp:                                          Rcpp::Named("pval_G2_cond") = ptr_gSAIGEobj->m_p_cond,
Main.cpp:                                          Rcpp::Named("gsum_G2_cond") = ptr_gSAIGEobj->m_gsum_cond_Mat,
Main.cpp:                                          Rcpp::Named("qsum_G2_cond") = ptr_gSAIGEobj->m_qsum_cond_Vec
Main.cpp:  unsigned int q_cond = (ptr_gSAIGEobj->m_VarInvMat_cond).n_rows;	
Main.cpp:  bool isCondition = ptr_gSAIGEobj->m_isCondition;
Main.cpp:		//	MAFG2_cond = (ptr_gSAIGEobj->m_MAF_cond)[ci];	
Main.cpp:  int n = ptr_gSAIGEobj->m_n;
Main.cpp:  if((ptr_gSAIGEobj->m_varRatio_null_mt).n_rows > 1){
Main.cpp:    //ptr_gSAIGEobj->assignSingleVarianceRatio(ptr_gSAIGEobj->m_flagSparseGRM_cur, false);
Main.cpp:    ptr_gSAIGEobj->assign_for_itrait(i_mt);
Main.cpp:      ptr_gSAIGEobj->set_flagSparseGRM_cur(false);
Main.cpp:        ptr_gSAIGEobj->assignSingleVarianceRatio(ptr_gSAIGEobj->m_flagSparseGRM_cur,  ptr_gSAIGEobj->m_isnoadjCov);
Main.cpp:        hasVarRatio = ptr_gSAIGEobj->assignVarianceRatio(MAC, ptr_gSAIGEobj->m_flagSparseGRM_cur,  ptr_gSAIGEobj->m_isnoadjCov);
Main.cpp:	  //std::cout << "ptr_gSAIGEobj->m_isnoadjCov " << ptr_gSAIGEobj->m_isnoadjCov << std::endl;
Main.cpp:          indexNonZeroVec_arma, indexZeroVec_arma, Beta, seBeta, pval, pval_noSPA, Tstat, gy, varT, altFreq, isSPAConverge, gtildeVec, is_gtilde, true, P2Vec, isCondition, Beta_c, seBeta_c, pval_c, pval_noSPA_c, Tstat_c, varT_c, G1tilde_P_G2tilde_Vec, is_Firth, is_FirthConverge, false, ptr_gSAIGEobj->m_isnoadjCov, ptr_gSAIGEobj->m_flagSparseGRM_cur);
Main.cpp:	if(pval < (ptr_gSAIGEobj->m_pval_cutoff_for_fastTest)){
Main.cpp:	  ptr_gSAIGEobj->set_flagSparseGRM_cur(true);
Main.cpp:             ptr_gSAIGEobj->getadjGFast(GVec, gtildeVec, indexNonZeroVec_arma);
Main.cpp:          arma::fvec tauvec_f = arma::conv_to< arma::fvec >::from(ptr_gSAIGEobj->m_tauvec);
Main.cpp:          arma::fvec m_mu2_f = arma::conv_to< arma::fvec >::from(ptr_gSAIGEobj->m_mu2);
Main.cpp:            hasVarRatio = ptr_gSAIGEobj->assignVarianceRatio(MAC, ptr_gSAIGEobj->m_flagSparseGRM_cur, false);
Main.cpp:            ptr_gSAIGEobj->assignSingleVarianceRatio(ptr_gSAIGEobj->m_flagSparseGRM_cur, false);
Main.cpp:          //P1Mat.row(i1InChunk) = sqrt(ptr_gSAIGEobj->m_varRatioVal)*gtildeVec.t();
Main.cpp:          P1Mat.row(i_mt*m1 + i1InChunk_vec(i_mt)) = sqrt(ptr_gSAIGEobj->m_varRatioVal)*gtildeVec.t();
Main.cpp:          //P2Mat.col(i1InChunk) = sqrt(ptr_gSAIGEobj->m_varRatioVal)*P2Vec;
Main.cpp:          P2Mat.col(i_mt*m1 + i1InChunk_vec(i_mt)) = sqrt(ptr_gSAIGEobj->m_varRatioVal)*P2Vec;
Main.cpp:        ptr_gSAIGEobj->assign_for_itrait_binaryindices(i_mt);
Main.cpp:        dosage_case = GVec.elem(ptr_gSAIGEobj->m_case_indices);
Main.cpp:        dosage_ctrl = GVec.elem(ptr_gSAIGEobj->m_ctrl_indices);
Main.cpp:  ptr_gSAIGEobj->extract_XV_XXVX_inv(XV, XXVX_inv);
Main.cpp:         ptr_gSAIGEobj->assign_for_itrait(i_mt);
Main.cpp:            hasVarRatio = ptr_gSAIGEobj->assignVarianceRatio(MAC, ptr_gSAIGEobj->m_flagSparseGRM_cur, true);
Main.cpp:            ptr_gSAIGEobj->assignSingleVarianceRatio(ptr_gSAIGEobj->m_flagSparseGRM_cur, true);
Main.cpp:              ptr_gSAIGEobj->getMarkerPval(genoURVec, indexNonZeroVec_arma, indexZeroVec_arma, Beta, seBeta, pval, pval_noSPA, altFreq, Tstat, gy, varT, isSPAConverge, gtildeVec, is_gtilde, true, P2Vec, isCondition, Beta_c, seBeta_c, pval_c, pval_noSPA_c, Tstat_c, varT_c, G1tilde_P_G2tilde_Vec, is_Firth, is_FirthConverge, true, false, false);
Main.cpp:              ptr_gSAIGEobj->getMarkerPval(genoURVec, indexNonZeroVec_arma, indexZeroVec_arma, Beta, seBeta, pval, pval_noSPA, altFreq, Tstat, gy, varT, isSPAConverge, gtildeVec, is_gtilde, true, P2Vec, isCondition, Beta_c, seBeta_c, pval_c, pval_noSPA_c, Tstat_c, varT_c, G1tilde_P_G2tilde_Vec, is_Firth, is_FirthConverge, false, true, ptr_gSAIGEobj->m_flagSparseGRM_cur);
Main.cpp:		              ptr_gSAIGEobj->assign_for_itrait_binaryindices(i_mt);
Main.cpp:                        dosage_case = genoURVec.elem(ptr_gSAIGEobj->m_case_indices);
Main.cpp:                        dosage_ctrl = genoURVec.elem(ptr_gSAIGEobj->m_ctrl_indices);
Main.cpp:	  P1Mat.row(i_mt*m1new + i1InChunk_vec(i_mt)) = sqrt(ptr_gSAIGEobj->m_varRatioVal)*gtildeVec.t();
Main.cpp:          //P2Mat.col(i1InChunk) = sqrt(ptr_gSAIGEobj->m_varRatioVal)*P2Vec;
Main.cpp:          P2Mat.col(i_mt*m1new + i1InChunk_vec(i_mt)) = sqrt(ptr_gSAIGEobj->m_varRatioVal)*P2Vec;
Main.cpp:        //P1Mat.row(i1InChunk) = sqrt(ptr_gSAIGEobj->m_varRatioVal)*gtildeVec.t();
Main.cpp:        //P2Mat.col(i1InChunk) = sqrt(ptr_gSAIGEobj->m_varRatioVal)*P2Vec;
Main.cpp:	     		ptr_gSAIGEobj->assign_for_itrait_binaryindices(i_mt);
Main.cpp:                        dosage_case = genoURVec.elem(ptr_gSAIGEobj->m_case_indices);
Main.cpp:                        dosage_ctrl = genoURVec.elem(ptr_gSAIGEobj->m_ctrl_indices);
Main.cpp:if(!ptr_gSAIGEobj->m_flagSparseGRM){
Main.cpp:  ptr_gSAIGEobj->assign_for_itrait(i_mt);
Main.cpp:       		ptr_gSAIGEobj->assignSingleVarianceRatio(ptr_gSAIGEobj->m_flagSparseGRM_cur, true);
Main.cpp:       		hasVarRatio = ptr_gSAIGEobj->assignVarianceRatio(MAC, ptr_gSAIGEobj->m_flagSparseGRM_cur, true);
Main.cpp:          ptr_gSAIGEobj->getMarkerPval(genoSumVec, indexNonZeroVec_arma, indexZeroVec_arma, Beta, seBeta, pval, pval_noSPA, altFreq, Tstat, gy, varT, isSPAConverge, gtildeVec, is_gtilde, isregion, P2Vec, isCondition, Beta_c, seBeta_c, pval_c, pval_noSPA_c, Tstat_c, varT_c, G1tilde_P_G2tilde_Vec, is_Firth, is_FirthConverge, true, false, ptr_gSAIGEobj->m_flagSparseGRM_cur);
Main.cpp:          ptr_gSAIGEobj->getMarkerPval(genoSumVec, indexNonZeroVec_arma, indexZeroVec_arma, Beta, seBeta, pval, pval_noSPA, altFreq, Tstat, gy, varT, isSPAConverge, gtildeVec, is_gtilde, isregion, P2Vec, isCondition, Beta_c, seBeta_c, pval_c, pval_noSPA_c, Tstat_c, varT_c, G1tilde_P_G2tilde_Vec, is_Firth, is_FirthConverge, false, false, ptr_gSAIGEobj->m_flagSparseGRM_cur);
Main.cpp:		if(ptr_gSAIGEobj->m_flagSparseGRM_cur){
Main.cpp:   std::cout << "(ptr_gSAIGEobj->m_VarInvMat_cond).n_rows " << (ptr_gSAIGEobj->m_VarInvMat_cond).n_rows  << std::endl;
Main.cpp:   std::cout << "(ptr_gSAIGEobj->m_VarInvMat_cond).n_cols " << (ptr_gSAIGEobj->m_VarInvMat_cond).n_cols  << std::endl;
Main.cpp:	VarInvMat_cond_sub = (ptr_gSAIGEobj->m_VarInvMat_cond).cols(startt_qcond, endt_qcond);
Main.cpp:	//(ptr_gSAIGEobj->m_VarInvMat_cond).print("ptr_gSAIGEobj->m_VarInvMat_cond");
Main.cpp:   	Tstat_cond_sub = (ptr_gSAIGEobj->m_Tstat_cond).subvec(startt_qcond,endt_qcond);
Main.cpp:      //arma::mat AdjCondMat = G1tilde_P_G2tilde_Weighted_Mat * (ptr_gSAIGEobj->m_VarInvMat_cond / (w0G2Mat_cond));
Main.cpp:      //arma::vec TstatAdjCond = AdjCondMat * (ptr_gSAIGEobj->m_Tstat_cond % w0G2Vec_cond ); 
Main.cpp:      OutList.push_back(ptr_gSAIGEobj->m_scalefactor_G2_cond, "scalefactor_G2_cond");
Main.cpp:      OutList.push_back(ptr_gSAIGEobj->m_VarInvMat_cond_scaled_weighted, "VarInvMat_G2_cond_scaled"); 
Main.cpp:      OutList.push_back(ptr_gSAIGEobj->m_Tstat_cond, "Tstat_G2_cond"); //m_Tstat_cond is weighted
Main.cpp:      OutList.push_back(ptr_gSAIGEobj->m_G2_Weight_cond, "G2_Weight_cond");
Main.cpp:        if(ptr_gSAIGEobj->m_flagSparseGRM_cur){
Main.cpp:  ptr_gSAIGEobj->set_flagSparseGRM_cur(ptr_gSAIGEobj->m_flagSparseGRM);
Main.cpp:  unsigned int nt = ptr_gSAIGEobj->m_traitType_vec.size();
Main.cpp:  if(ptr_gSAIGEobj->m_varRatio_null_mt.n_rows == 1){
Main.cpp:        //ptr_gSAIGEobj->assignSingleVarianceRatio(ptr_gSAIGEobj->m_flagSparseGRM_cur, true);
Main.cpp:        //ptr_gSAIGEobj->assignSingleVarianceRatio(false);
Main.cpp:     ptr_gSAIGEobj->assign_for_itrait(i_mt);
Main.cpp:       ptr_gSAIGEobj->assignSingleVarianceRatio(ptr_gSAIGEobj->m_flagSparseGRM_cur, true);
Main.cpp:       hasVarRatio = ptr_gSAIGEobj->assignVarianceRatio(MAC, ptr_gSAIGEobj->m_flagSparseGRM_cur, true);
Main.cpp:                    indexNonZeroVec_arma, indexZeroVec_arma, Beta, seBeta, pval, pval_noSPA, Tstat, gy, varT, altFreq, isSPAConverge, gtildeVec, is_gtilde, true, P2Vec, isCondition, Beta_c, seBeta_c, pval_c, pval_noSPA_c, Tstat_c, varT_c, G1tilde_P_G2tilde_Vec, is_Firth, is_FirthConverge, false, true, ptr_gSAIGEobj->m_flagSparseGRM);
Main.cpp:                    indexNonZeroVec_arma, indexZeroVec_arma, Beta, seBeta, pval, pval_noSPA, Tstat, gy, varT, altFreq, isSPAConverge, gtildeVec, is_gtilde, true, P2Vec, isCondition, Beta_c, seBeta_c, pval_c, pval_noSPA_c, Tstat_c, varT_c, G1tilde_P_G2tilde_Vec, is_Firth, is_FirthConverge, true, true, ptr_gSAIGEobj->m_flagSparseGRM);
Main.cpp:      ptr_gSAIGEobj->getadjG(GVec, gtildeVec);
Main.cpp:      P1Mat.row(j_mt) = sqrt(ptr_gSAIGEobj->m_varRatioVal)*gtildeVec.t();
Main.cpp:      P2Mat.col(j_mt) = sqrt(ptr_gSAIGEobj->m_varRatioVal)*P2Vec;
Main.cpp:     ptr_gSAIGEobj->assign_for_itrait(i_mt);
Main.cpp:     ptr_gSAIGEobj->getadjG(gsumVec, gsumtildeVec);
Main.cpp:  ptr_gSAIGEobj->assignConditionFactors(
Main.cpp:  ptr_gSAIGEobj->m_VarInvMat_cond_scaled_weighted.resize(q, q*nt);					
Main.cpp:	ptr_gSAIGEobj->assignConditionFactors_scalefactor(scalefactor_G2_cond);
Main.cpp:        ptr_gSAIGEobj->assignConditionFactors_scalefactor_multiTrait(scalefactor_G2_cond, oml);
Main.cpp:		if(ptr_gSAIGEobj->m_isCondition){
Main.cpp:                if(ptr_gSAIGEobj->m_isCondition){
Main.cpp:                if(ptr_gSAIGEobj->m_isCondition){
Main.cpp:	ptr_gSAIGEobj->set_flagSparseGRM_cur(t_flagSparseGRM_cur);
Main.cpp:	ptr_gSAIGEobj->set_flagSparseGRM_cur(ptr_gSAIGEobj->m_flagSparseGRM);
Main.cpp:    if(!ptr_gSAIGEobj->m_isFastTest){
Main.cpp:       ptr_gSAIGEobj->set_flagSparseGRM_cur(ptr_gSAIGEobj->m_flagSparseGRM);
Main.cpp:         hasVarRatio = ptr_gSAIGEobj->assignVarianceRatio(MAC, ptr_gSAIGEobj->m_flagSparseGRM, isnoXadj);
Main.cpp:         ptr_gSAIGEobj->assignSingleVarianceRatio(ptr_gSAIGEobj->m_flagSparseGRM, isnoXadj);
Main.cpp:       ptr_gSAIGEobj->set_flagSparseGRM_cur(false);
Main.cpp:         hasVarRatio = ptr_gSAIGEobj->assignVarianceRatio(MAC, false, isnoXadj);
Main.cpp:         ptr_gSAIGEobj->assignSingleVarianceRatio(false, isnoXadj);
Main.cpp:           if(ptr_gSAIGEobj->m_traitType_vec.at(itt) == "binary"){
Main.cpp:     if(ptr_gSAIGEobj->m_traitType_vec.at(itt) == "binary"){
Main.cpp:  for(unsigned int j_mt = 0; j_mt < ptr_gSAIGEobj->m_traitType_vec.size(); j_mt++){
Main.cpp:	int n = (ptr_gSAIGEobj->g_I_longl_mat).n_rows;
Main.cpp:	ptr_gSAIGEobj->g_I_longl_mat = t_Ilongmat;
Main.cpp:        ptr_gSAIGEobj->g_I_longl_vec = t_I_longl_vec_new;
Main.cpp:        ptr_gSAIGEobj->g_T_longl_mat = t_Tlongmat;
Main.cpp:        ptr_gSAIGEobj->g_T_longl_vec = t_T_longl_vec;
Main.cpp:  //std::cout << "ptr_gSAIGEobj->m_flagSparseGRM_cur " << ptr_gSAIGEobj->m_flagSparseGRM_cur << std::endl;
Main.cpp:  //std::cout << "ptr_gSAIGEobj->m_flagSparseGRM " << ptr_gSAIGEobj->m_flagSparseGRM << std::endl;
Main.cpp:  bool isCondition = ptr_gSAIGEobj->m_isCondition;
Main.cpp:  arma::rowvec G1tilde_P_G2tilde_Vec(ptr_gSAIGEobj->m_numMarker_cond);
Main.cpp:  //int n = ptr_gSAIGEobj->m_n;
Main.cpp:  int n = ptr_gSAIGEobj->m_n;
Main.cpp:  if(ptr_gSAIGEobj->m_isFastTest){
Main.cpp:    ptr_gSAIGEobj->set_flagSparseGRM_cur(false);
Main.cpp:    ptr_gSAIGEobj->set_flagSparseGRM_cur(ptr_gSAIGEobj->m_flagSparseGRM);
Main.cpp:  if((ptr_gSAIGEobj->m_varRatio_null).n_elem == 1){
Main.cpp:        ptr_gSAIGEobj->assignSingleVarianceRatio(ptr_gSAIGEobj->m_flagSparseGRM_cur, true);
Main.cpp:        //ptr_gSAIGEobj->assignSingleVarianceRatio(false);
Main.cpp:    ptr_gSAIGEobj->set_flagSparseGRM_cur(false);
Main.cpp:    //   ptr_gSAIGEobj->assignSingleVarianceRatio(ptr_gSAIGEobj->m_flagSparseGRM_cur, true);
Main.cpp:    //   hasVarRatio = ptr_gSAIGEobj->assignVarianceRatio(MACforvr, ptr_gSAIGEobj->m_flagSparseGRM_cur, true);
Main.cpp:    ptr_gSAIGEobj->getMarkerPval_multi(t_GMat, meanGVec, macVec, BetaVec, seBetaVec, pvalVec, pvalNAVec, TstatVec, varTVec, t_pval_str_vec);
