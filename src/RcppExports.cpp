// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <RcppEigen.h>
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// CCT_cpp
double CCT_cpp(arma::vec& pval);
RcppExport SEXP _SAIGE_CCT_cpp(SEXP pvalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type pval(pvalSEXP);
    rcpp_result_gen = Rcpp::wrap(CCT_cpp(pval));
    return rcpp_result_gen;
END_RCPP
}
// setGlobalVarsInCPP_LDmat
void setGlobalVarsInCPP_LDmat(std::string t_impute_method, double t_dosage_zerod_cutoff, double t_dosage_zerod_MAC_cutoff, double t_missing_cutoff, double t_maxMAFLimit, double t_min_maf_marker, double t_min_mac_marker, double t_min_info_marker, unsigned int t_max_markers_region, std::string t_outputFile);
RcppExport SEXP _SAIGE_setGlobalVarsInCPP_LDmat(SEXP t_impute_methodSEXP, SEXP t_dosage_zerod_cutoffSEXP, SEXP t_dosage_zerod_MAC_cutoffSEXP, SEXP t_missing_cutoffSEXP, SEXP t_maxMAFLimitSEXP, SEXP t_min_maf_markerSEXP, SEXP t_min_mac_markerSEXP, SEXP t_min_info_markerSEXP, SEXP t_max_markers_regionSEXP, SEXP t_outputFileSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type t_impute_method(t_impute_methodSEXP);
    Rcpp::traits::input_parameter< double >::type t_dosage_zerod_cutoff(t_dosage_zerod_cutoffSEXP);
    Rcpp::traits::input_parameter< double >::type t_dosage_zerod_MAC_cutoff(t_dosage_zerod_MAC_cutoffSEXP);
    Rcpp::traits::input_parameter< double >::type t_missing_cutoff(t_missing_cutoffSEXP);
    Rcpp::traits::input_parameter< double >::type t_maxMAFLimit(t_maxMAFLimitSEXP);
    Rcpp::traits::input_parameter< double >::type t_min_maf_marker(t_min_maf_markerSEXP);
    Rcpp::traits::input_parameter< double >::type t_min_mac_marker(t_min_mac_markerSEXP);
    Rcpp::traits::input_parameter< double >::type t_min_info_marker(t_min_info_markerSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type t_max_markers_region(t_max_markers_regionSEXP);
    Rcpp::traits::input_parameter< std::string >::type t_outputFile(t_outputFileSEXP);
    setGlobalVarsInCPP_LDmat(t_impute_method, t_dosage_zerod_cutoff, t_dosage_zerod_MAC_cutoff, t_missing_cutoff, t_maxMAFLimit, t_min_maf_marker, t_min_mac_marker, t_min_info_marker, t_max_markers_region, t_outputFile);
    return R_NilValue;
END_RCPP
}
// LDmatRegionInCPP
void LDmatRegionInCPP(std::string t_genoType, std::vector<std::string>& t_genoIndex_prev, std::vector<std::string>& t_genoIndex, arma::mat& annoIndicatorMat, std::string t_outputFile, unsigned int t_n, bool t_isImputation, std::vector<std::string>& annoStringVec, std::string regionName);
RcppExport SEXP _SAIGE_LDmatRegionInCPP(SEXP t_genoTypeSEXP, SEXP t_genoIndex_prevSEXP, SEXP t_genoIndexSEXP, SEXP annoIndicatorMatSEXP, SEXP t_outputFileSEXP, SEXP t_nSEXP, SEXP t_isImputationSEXP, SEXP annoStringVecSEXP, SEXP regionNameSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type t_genoType(t_genoTypeSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string>& >::type t_genoIndex_prev(t_genoIndex_prevSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string>& >::type t_genoIndex(t_genoIndexSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type annoIndicatorMat(annoIndicatorMatSEXP);
    Rcpp::traits::input_parameter< std::string >::type t_outputFile(t_outputFileSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type t_n(t_nSEXP);
    Rcpp::traits::input_parameter< bool >::type t_isImputation(t_isImputationSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string>& >::type annoStringVec(annoStringVecSEXP);
    Rcpp::traits::input_parameter< std::string >::type regionName(regionNameSEXP);
    LDmatRegionInCPP(t_genoType, t_genoIndex_prev, t_genoIndex, annoIndicatorMat, t_outputFile, t_n, t_isImputation, annoStringVec, regionName);
    return R_NilValue;
END_RCPP
}
// openOutfile_single_LDmat
bool openOutfile_single_LDmat(bool isappend);
RcppExport SEXP _SAIGE_openOutfile_single_LDmat(SEXP isappendSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< bool >::type isappend(isappendSEXP);
    rcpp_result_gen = Rcpp::wrap(openOutfile_single_LDmat(isappend));
    return rcpp_result_gen;
END_RCPP
}
// closeOutfile_single_LDmat
void closeOutfile_single_LDmat();
RcppExport SEXP _SAIGE_closeOutfile_single_LDmat() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    closeOutfile_single_LDmat();
    return R_NilValue;
END_RCPP
}
// setAssocTest_GlobalVarsInCPP
void setAssocTest_GlobalVarsInCPP(std::string t_impute_method, double t_missing_cutoff, double t_min_maf_marker, double t_min_mac_marker, double t_min_info_marker, double t_dosage_zerod_cutoff, double t_dosage_zerod_MAC_cutoff, std::string t_outputFilePrefix, double t_MACCutoffforER);
RcppExport SEXP _SAIGE_setAssocTest_GlobalVarsInCPP(SEXP t_impute_methodSEXP, SEXP t_missing_cutoffSEXP, SEXP t_min_maf_markerSEXP, SEXP t_min_mac_markerSEXP, SEXP t_min_info_markerSEXP, SEXP t_dosage_zerod_cutoffSEXP, SEXP t_dosage_zerod_MAC_cutoffSEXP, SEXP t_outputFilePrefixSEXP, SEXP t_MACCutoffforERSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type t_impute_method(t_impute_methodSEXP);
    Rcpp::traits::input_parameter< double >::type t_missing_cutoff(t_missing_cutoffSEXP);
    Rcpp::traits::input_parameter< double >::type t_min_maf_marker(t_min_maf_markerSEXP);
    Rcpp::traits::input_parameter< double >::type t_min_mac_marker(t_min_mac_markerSEXP);
    Rcpp::traits::input_parameter< double >::type t_min_info_marker(t_min_info_markerSEXP);
    Rcpp::traits::input_parameter< double >::type t_dosage_zerod_cutoff(t_dosage_zerod_cutoffSEXP);
    Rcpp::traits::input_parameter< double >::type t_dosage_zerod_MAC_cutoff(t_dosage_zerod_MAC_cutoffSEXP);
    Rcpp::traits::input_parameter< std::string >::type t_outputFilePrefix(t_outputFilePrefixSEXP);
    Rcpp::traits::input_parameter< double >::type t_MACCutoffforER(t_MACCutoffforERSEXP);
    setAssocTest_GlobalVarsInCPP(t_impute_method, t_missing_cutoff, t_min_maf_marker, t_min_mac_marker, t_min_info_marker, t_dosage_zerod_cutoff, t_dosage_zerod_MAC_cutoff, t_outputFilePrefix, t_MACCutoffforER);
    return R_NilValue;
END_RCPP
}
// setAssocTest_GlobalVarsInCPP_GbyE
void setAssocTest_GlobalVarsInCPP_GbyE(arma::fmat& t_emat, bool t_isgxe, double t_pval_cutoff_for_gxe);
RcppExport SEXP _SAIGE_setAssocTest_GlobalVarsInCPP_GbyE(SEXP t_ematSEXP, SEXP t_isgxeSEXP, SEXP t_pval_cutoff_for_gxeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::fmat& >::type t_emat(t_ematSEXP);
    Rcpp::traits::input_parameter< bool >::type t_isgxe(t_isgxeSEXP);
    Rcpp::traits::input_parameter< double >::type t_pval_cutoff_for_gxe(t_pval_cutoff_for_gxeSEXP);
    setAssocTest_GlobalVarsInCPP_GbyE(t_emat, t_isgxe, t_pval_cutoff_for_gxe);
    return R_NilValue;
END_RCPP
}
// setMarker_GlobalVarsInCPP
void setMarker_GlobalVarsInCPP(bool t_isOutputMoreDetails, int t_marker_chunksize);
RcppExport SEXP _SAIGE_setMarker_GlobalVarsInCPP(SEXP t_isOutputMoreDetailsSEXP, SEXP t_marker_chunksizeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< bool >::type t_isOutputMoreDetails(t_isOutputMoreDetailsSEXP);
    Rcpp::traits::input_parameter< int >::type t_marker_chunksize(t_marker_chunksizeSEXP);
    setMarker_GlobalVarsInCPP(t_isOutputMoreDetails, t_marker_chunksize);
    return R_NilValue;
END_RCPP
}
// setRegion_GlobalVarsInCPP
void setRegion_GlobalVarsInCPP(arma::vec t_max_maf_region, unsigned int t_max_markers_region, double t_MACCutoff_to_CollapseUltraRare, double t_min_gourpmac_for_burdenonly);
RcppExport SEXP _SAIGE_setRegion_GlobalVarsInCPP(SEXP t_max_maf_regionSEXP, SEXP t_max_markers_regionSEXP, SEXP t_MACCutoff_to_CollapseUltraRareSEXP, SEXP t_min_gourpmac_for_burdenonlySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type t_max_maf_region(t_max_maf_regionSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type t_max_markers_region(t_max_markers_regionSEXP);
    Rcpp::traits::input_parameter< double >::type t_MACCutoff_to_CollapseUltraRare(t_MACCutoff_to_CollapseUltraRareSEXP);
    Rcpp::traits::input_parameter< double >::type t_min_gourpmac_for_burdenonly(t_min_gourpmac_for_burdenonlySEXP);
    setRegion_GlobalVarsInCPP(t_max_maf_region, t_max_markers_region, t_MACCutoff_to_CollapseUltraRare, t_min_gourpmac_for_burdenonly);
    return R_NilValue;
END_RCPP
}
// mainMarkerInCPP
void mainMarkerInCPP(std::string& t_genoType, std::vector<std::string>& t_traitType, std::vector<std::string>& t_genoIndex_prev, std::vector<std::string>& t_genoIndex, bool& t_isMoreOutput, bool& t_isImputation, bool& t_isFirth);
RcppExport SEXP _SAIGE_mainMarkerInCPP(SEXP t_genoTypeSEXP, SEXP t_traitTypeSEXP, SEXP t_genoIndex_prevSEXP, SEXP t_genoIndexSEXP, SEXP t_isMoreOutputSEXP, SEXP t_isImputationSEXP, SEXP t_isFirthSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string& >::type t_genoType(t_genoTypeSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string>& >::type t_traitType(t_traitTypeSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string>& >::type t_genoIndex_prev(t_genoIndex_prevSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string>& >::type t_genoIndex(t_genoIndexSEXP);
    Rcpp::traits::input_parameter< bool& >::type t_isMoreOutput(t_isMoreOutputSEXP);
    Rcpp::traits::input_parameter< bool& >::type t_isImputation(t_isImputationSEXP);
    Rcpp::traits::input_parameter< bool& >::type t_isFirth(t_isFirthSEXP);
    mainMarkerInCPP(t_genoType, t_traitType, t_genoIndex_prev, t_genoIndex, t_isMoreOutput, t_isImputation, t_isFirth);
    return R_NilValue;
END_RCPP
}
// Unified_getSampleSizeinGeno
uint32_t Unified_getSampleSizeinGeno(std::string& t_genoType);
RcppExport SEXP _SAIGE_Unified_getSampleSizeinGeno(SEXP t_genoTypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string& >::type t_genoType(t_genoTypeSEXP);
    rcpp_result_gen = Rcpp::wrap(Unified_getSampleSizeinGeno(t_genoType));
    return rcpp_result_gen;
END_RCPP
}
// Unified_getSampleSizeinAnalysis
uint32_t Unified_getSampleSizeinAnalysis(std::string& t_genoType);
RcppExport SEXP _SAIGE_Unified_getSampleSizeinAnalysis(SEXP t_genoTypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string& >::type t_genoType(t_genoTypeSEXP);
    rcpp_result_gen = Rcpp::wrap(Unified_getSampleSizeinAnalysis(t_genoType));
    return rcpp_result_gen;
END_RCPP
}
// setPLINKobjInCPP
void setPLINKobjInCPP(std::string t_bimFile, std::string t_famFile, std::string t_bedFile, std::vector<std::string>& t_SampleInModel, std::string t_AlleleOrder);
RcppExport SEXP _SAIGE_setPLINKobjInCPP(SEXP t_bimFileSEXP, SEXP t_famFileSEXP, SEXP t_bedFileSEXP, SEXP t_SampleInModelSEXP, SEXP t_AlleleOrderSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type t_bimFile(t_bimFileSEXP);
    Rcpp::traits::input_parameter< std::string >::type t_famFile(t_famFileSEXP);
    Rcpp::traits::input_parameter< std::string >::type t_bedFile(t_bedFileSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string>& >::type t_SampleInModel(t_SampleInModelSEXP);
    Rcpp::traits::input_parameter< std::string >::type t_AlleleOrder(t_AlleleOrderSEXP);
    setPLINKobjInCPP(t_bimFile, t_famFile, t_bedFile, t_SampleInModel, t_AlleleOrder);
    return R_NilValue;
END_RCPP
}
// setBGENobjInCPP
void setBGENobjInCPP(std::string t_bgenFileName, std::string t_bgenFileIndex, std::vector<std::string>& t_SampleInBgen, std::vector<std::string>& t_SampleInModel, std::string t_AlleleOrder);
RcppExport SEXP _SAIGE_setBGENobjInCPP(SEXP t_bgenFileNameSEXP, SEXP t_bgenFileIndexSEXP, SEXP t_SampleInBgenSEXP, SEXP t_SampleInModelSEXP, SEXP t_AlleleOrderSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type t_bgenFileName(t_bgenFileNameSEXP);
    Rcpp::traits::input_parameter< std::string >::type t_bgenFileIndex(t_bgenFileIndexSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string>& >::type t_SampleInBgen(t_SampleInBgenSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string>& >::type t_SampleInModel(t_SampleInModelSEXP);
    Rcpp::traits::input_parameter< std::string >::type t_AlleleOrder(t_AlleleOrderSEXP);
    setBGENobjInCPP(t_bgenFileName, t_bgenFileIndex, t_SampleInBgen, t_SampleInModel, t_AlleleOrder);
    return R_NilValue;
END_RCPP
}
// setVCFobjInCPP
void setVCFobjInCPP(std::string t_vcfFileName, std::string t_vcfFileIndex, std::string t_vcfField, std::vector<std::string>& t_SampleInModel);
RcppExport SEXP _SAIGE_setVCFobjInCPP(SEXP t_vcfFileNameSEXP, SEXP t_vcfFileIndexSEXP, SEXP t_vcfFieldSEXP, SEXP t_SampleInModelSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type t_vcfFileName(t_vcfFileNameSEXP);
    Rcpp::traits::input_parameter< std::string >::type t_vcfFileIndex(t_vcfFileIndexSEXP);
    Rcpp::traits::input_parameter< std::string >::type t_vcfField(t_vcfFieldSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string>& >::type t_SampleInModel(t_SampleInModelSEXP);
    setVCFobjInCPP(t_vcfFileName, t_vcfFileIndex, t_vcfField, t_SampleInModel);
    return R_NilValue;
END_RCPP
}
// setSAIGEobjInCPP
void setSAIGEobjInCPP(arma::mat& t_XVX, arma::mat& t_XXVX_inv, arma::mat& t_XV, arma::mat& t_XVX_inv_XV, arma::mat& t_Sigma_iXXSigma_iX, arma::mat& t_X, arma::mat& t_S_a, arma::mat& t_res, arma::mat& t_mu2, arma::mat& t_mu, arma::mat& t_varRatio_sparse, arma::mat& t_varRatio_null, arma::mat& t_varRatio_null_noXadj, arma::mat& t_varRatio_null_eg, arma::mat& t_varRatio_sparse_eg, arma::vec& t_cateVarRatioMinMACVecExclude, arma::vec& t_cateVarRatioMaxMACVecInclude, double t_SPA_Cutoff, arma::mat& t_tauvec, arma::mat& t_varWeightsvec, std::vector<std::string>& t_traitType, arma::mat& t_y, std::string t_impute_method, bool t_flagSparseGRM, bool t_isnoadjCov, double t_pval_cutoff_for_fastTest, bool t_isCondition, std::vector<uint32_t>& t_condition_genoIndex, bool t_is_Firth_beta, double t_pCutoffforFirth, arma::mat& t_offset, arma::mat& t_resout, arma::sp_mat& t_SigmaMat_sp, float t_tauVal_sp, arma::sp_mat& t_Ilongmat, arma::vec& t_I_longl_vec, arma::sp_mat& t_Tlongmat, arma::vec& t_T_longl_vec, bool t_is_EmpSPA, arma::mat& t_cumul);
RcppExport SEXP _SAIGE_setSAIGEobjInCPP(SEXP t_XVXSEXP, SEXP t_XXVX_invSEXP, SEXP t_XVSEXP, SEXP t_XVX_inv_XVSEXP, SEXP t_Sigma_iXXSigma_iXSEXP, SEXP t_XSEXP, SEXP t_S_aSEXP, SEXP t_resSEXP, SEXP t_mu2SEXP, SEXP t_muSEXP, SEXP t_varRatio_sparseSEXP, SEXP t_varRatio_nullSEXP, SEXP t_varRatio_null_noXadjSEXP, SEXP t_varRatio_null_egSEXP, SEXP t_varRatio_sparse_egSEXP, SEXP t_cateVarRatioMinMACVecExcludeSEXP, SEXP t_cateVarRatioMaxMACVecIncludeSEXP, SEXP t_SPA_CutoffSEXP, SEXP t_tauvecSEXP, SEXP t_varWeightsvecSEXP, SEXP t_traitTypeSEXP, SEXP t_ySEXP, SEXP t_impute_methodSEXP, SEXP t_flagSparseGRMSEXP, SEXP t_isnoadjCovSEXP, SEXP t_pval_cutoff_for_fastTestSEXP, SEXP t_isConditionSEXP, SEXP t_condition_genoIndexSEXP, SEXP t_is_Firth_betaSEXP, SEXP t_pCutoffforFirthSEXP, SEXP t_offsetSEXP, SEXP t_resoutSEXP, SEXP t_SigmaMat_spSEXP, SEXP t_tauVal_spSEXP, SEXP t_IlongmatSEXP, SEXP t_I_longl_vecSEXP, SEXP t_TlongmatSEXP, SEXP t_T_longl_vecSEXP, SEXP t_is_EmpSPASEXP, SEXP t_cumulSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type t_XVX(t_XVXSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type t_XXVX_inv(t_XXVX_invSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type t_XV(t_XVSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type t_XVX_inv_XV(t_XVX_inv_XVSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type t_Sigma_iXXSigma_iX(t_Sigma_iXXSigma_iXSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type t_X(t_XSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type t_S_a(t_S_aSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type t_res(t_resSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type t_mu2(t_mu2SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type t_mu(t_muSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type t_varRatio_sparse(t_varRatio_sparseSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type t_varRatio_null(t_varRatio_nullSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type t_varRatio_null_noXadj(t_varRatio_null_noXadjSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type t_varRatio_null_eg(t_varRatio_null_egSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type t_varRatio_sparse_eg(t_varRatio_sparse_egSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type t_cateVarRatioMinMACVecExclude(t_cateVarRatioMinMACVecExcludeSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type t_cateVarRatioMaxMACVecInclude(t_cateVarRatioMaxMACVecIncludeSEXP);
    Rcpp::traits::input_parameter< double >::type t_SPA_Cutoff(t_SPA_CutoffSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type t_tauvec(t_tauvecSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type t_varWeightsvec(t_varWeightsvecSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string>& >::type t_traitType(t_traitTypeSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type t_y(t_ySEXP);
    Rcpp::traits::input_parameter< std::string >::type t_impute_method(t_impute_methodSEXP);
    Rcpp::traits::input_parameter< bool >::type t_flagSparseGRM(t_flagSparseGRMSEXP);
    Rcpp::traits::input_parameter< bool >::type t_isnoadjCov(t_isnoadjCovSEXP);
    Rcpp::traits::input_parameter< double >::type t_pval_cutoff_for_fastTest(t_pval_cutoff_for_fastTestSEXP);
    Rcpp::traits::input_parameter< bool >::type t_isCondition(t_isConditionSEXP);
    Rcpp::traits::input_parameter< std::vector<uint32_t>& >::type t_condition_genoIndex(t_condition_genoIndexSEXP);
    Rcpp::traits::input_parameter< bool >::type t_is_Firth_beta(t_is_Firth_betaSEXP);
    Rcpp::traits::input_parameter< double >::type t_pCutoffforFirth(t_pCutoffforFirthSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type t_offset(t_offsetSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type t_resout(t_resoutSEXP);
    Rcpp::traits::input_parameter< arma::sp_mat& >::type t_SigmaMat_sp(t_SigmaMat_spSEXP);
    Rcpp::traits::input_parameter< float >::type t_tauVal_sp(t_tauVal_spSEXP);
    Rcpp::traits::input_parameter< arma::sp_mat& >::type t_Ilongmat(t_IlongmatSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type t_I_longl_vec(t_I_longl_vecSEXP);
    Rcpp::traits::input_parameter< arma::sp_mat& >::type t_Tlongmat(t_TlongmatSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type t_T_longl_vec(t_T_longl_vecSEXP);
    Rcpp::traits::input_parameter< bool >::type t_is_EmpSPA(t_is_EmpSPASEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type t_cumul(t_cumulSEXP);
    setSAIGEobjInCPP(t_XVX, t_XXVX_inv, t_XV, t_XVX_inv_XV, t_Sigma_iXXSigma_iX, t_X, t_S_a, t_res, t_mu2, t_mu, t_varRatio_sparse, t_varRatio_null, t_varRatio_null_noXadj, t_varRatio_null_eg, t_varRatio_sparse_eg, t_cateVarRatioMinMACVecExclude, t_cateVarRatioMaxMACVecInclude, t_SPA_Cutoff, t_tauvec, t_varWeightsvec, t_traitType, t_y, t_impute_method, t_flagSparseGRM, t_isnoadjCov, t_pval_cutoff_for_fastTest, t_isCondition, t_condition_genoIndex, t_is_Firth_beta, t_pCutoffforFirth, t_offset, t_resout, t_SigmaMat_sp, t_tauVal_sp, t_Ilongmat, t_I_longl_vec, t_Tlongmat, t_T_longl_vec, t_is_EmpSPA, t_cumul);
    return R_NilValue;
END_RCPP
}
// RegionSetUpConditional_binary_InCPP
Rcpp::List RegionSetUpConditional_binary_InCPP(arma::vec& t_weight_cond);
RcppExport SEXP _SAIGE_RegionSetUpConditional_binary_InCPP(SEXP t_weight_condSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type t_weight_cond(t_weight_condSEXP);
    rcpp_result_gen = Rcpp::wrap(RegionSetUpConditional_binary_InCPP(t_weight_cond));
    return rcpp_result_gen;
END_RCPP
}
// mainRegionInCPP
Rcpp::List mainRegionInCPP(std::string t_genoType, std::vector<std::string>& t_genoIndex_prev, std::vector<std::string>& t_genoIndex, arma::mat& annoIndicatorMat, std::vector<std::string>& t_weightlistvec, arma::vec& maxMAFVec, arma::vec& minMAFVec, std::string t_outputFile, std::string t_traitType, unsigned int t_n, arma::mat& P1Mat, arma::mat& P2Mat, std::string t_regionTestType, bool t_isImputation, arma::mat& t_Beta_param, arma::mat& t_weight, arma::vec& t_weight_cond, bool t_isIncludeNoWeights, bool t_isSingleinGroupTest, bool t_isOutputMarkerList, std::vector<std::string>& annoStringVec, std::string regionName, bool t_isFastTest, bool t_isMoreOutput);
RcppExport SEXP _SAIGE_mainRegionInCPP(SEXP t_genoTypeSEXP, SEXP t_genoIndex_prevSEXP, SEXP t_genoIndexSEXP, SEXP annoIndicatorMatSEXP, SEXP t_weightlistvecSEXP, SEXP maxMAFVecSEXP, SEXP minMAFVecSEXP, SEXP t_outputFileSEXP, SEXP t_traitTypeSEXP, SEXP t_nSEXP, SEXP P1MatSEXP, SEXP P2MatSEXP, SEXP t_regionTestTypeSEXP, SEXP t_isImputationSEXP, SEXP t_Beta_paramSEXP, SEXP t_weightSEXP, SEXP t_weight_condSEXP, SEXP t_isIncludeNoWeightsSEXP, SEXP t_isSingleinGroupTestSEXP, SEXP t_isOutputMarkerListSEXP, SEXP annoStringVecSEXP, SEXP regionNameSEXP, SEXP t_isFastTestSEXP, SEXP t_isMoreOutputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type t_genoType(t_genoTypeSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string>& >::type t_genoIndex_prev(t_genoIndex_prevSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string>& >::type t_genoIndex(t_genoIndexSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type annoIndicatorMat(annoIndicatorMatSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string>& >::type t_weightlistvec(t_weightlistvecSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type maxMAFVec(maxMAFVecSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type minMAFVec(minMAFVecSEXP);
    Rcpp::traits::input_parameter< std::string >::type t_outputFile(t_outputFileSEXP);
    Rcpp::traits::input_parameter< std::string >::type t_traitType(t_traitTypeSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type t_n(t_nSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type P1Mat(P1MatSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type P2Mat(P2MatSEXP);
    Rcpp::traits::input_parameter< std::string >::type t_regionTestType(t_regionTestTypeSEXP);
    Rcpp::traits::input_parameter< bool >::type t_isImputation(t_isImputationSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type t_Beta_param(t_Beta_paramSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type t_weight(t_weightSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type t_weight_cond(t_weight_condSEXP);
    Rcpp::traits::input_parameter< bool >::type t_isIncludeNoWeights(t_isIncludeNoWeightsSEXP);
    Rcpp::traits::input_parameter< bool >::type t_isSingleinGroupTest(t_isSingleinGroupTestSEXP);
    Rcpp::traits::input_parameter< bool >::type t_isOutputMarkerList(t_isOutputMarkerListSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string>& >::type annoStringVec(annoStringVecSEXP);
    Rcpp::traits::input_parameter< std::string >::type regionName(regionNameSEXP);
    Rcpp::traits::input_parameter< bool >::type t_isFastTest(t_isFastTestSEXP);
    Rcpp::traits::input_parameter< bool >::type t_isMoreOutput(t_isMoreOutputSEXP);
    rcpp_result_gen = Rcpp::wrap(mainRegionInCPP(t_genoType, t_genoIndex_prev, t_genoIndex, annoIndicatorMat, t_weightlistvec, maxMAFVec, minMAFVec, t_outputFile, t_traitType, t_n, P1Mat, P2Mat, t_regionTestType, t_isImputation, t_Beta_param, t_weight, t_weight_cond, t_isIncludeNoWeights, t_isSingleinGroupTest, t_isOutputMarkerList, annoStringVec, regionName, t_isFastTest, t_isMoreOutput));
    return rcpp_result_gen;
END_RCPP
}
// assign_conditionMarkers_factors
void assign_conditionMarkers_factors(std::string t_genoType, std::vector<std::string>& t_genoIndex_prev, std::vector<std::string>& t_genoIndex, unsigned int t_n, arma::vec& t_weight_cond);
RcppExport SEXP _SAIGE_assign_conditionMarkers_factors(SEXP t_genoTypeSEXP, SEXP t_genoIndex_prevSEXP, SEXP t_genoIndexSEXP, SEXP t_nSEXP, SEXP t_weight_condSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type t_genoType(t_genoTypeSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string>& >::type t_genoIndex_prev(t_genoIndex_prevSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string>& >::type t_genoIndex(t_genoIndexSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type t_n(t_nSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type t_weight_cond(t_weight_condSEXP);
    assign_conditionMarkers_factors(t_genoType, t_genoIndex_prev, t_genoIndex, t_n, t_weight_cond);
    return R_NilValue;
END_RCPP
}
// assign_conditionMarkers_factors_binary_region
void assign_conditionMarkers_factors_binary_region(arma::vec& scalefactor_G2_cond);
RcppExport SEXP _SAIGE_assign_conditionMarkers_factors_binary_region(SEXP scalefactor_G2_condSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type scalefactor_G2_cond(scalefactor_G2_condSEXP);
    assign_conditionMarkers_factors_binary_region(scalefactor_G2_cond);
    return R_NilValue;
END_RCPP
}
// set_iterator_inVcf
void set_iterator_inVcf(std::string& variantList, std::string& chrom, int& beg_pd, int& end_pd);
RcppExport SEXP _SAIGE_set_iterator_inVcf(SEXP variantListSEXP, SEXP chromSEXP, SEXP beg_pdSEXP, SEXP end_pdSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string& >::type variantList(variantListSEXP);
    Rcpp::traits::input_parameter< std::string& >::type chrom(chromSEXP);
    Rcpp::traits::input_parameter< int& >::type beg_pd(beg_pdSEXP);
    Rcpp::traits::input_parameter< int& >::type end_pd(end_pdSEXP);
    set_iterator_inVcf(variantList, chrom, beg_pd, end_pd);
    return R_NilValue;
END_RCPP
}
// check_Vcf_end
bool check_Vcf_end();
RcppExport SEXP _SAIGE_check_Vcf_end() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(check_Vcf_end());
    return rcpp_result_gen;
END_RCPP
}
// move_forward_iterator_Vcf
void move_forward_iterator_Vcf(int i);
RcppExport SEXP _SAIGE_move_forward_iterator_Vcf(SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    move_forward_iterator_Vcf(i);
    return R_NilValue;
END_RCPP
}
// fast_logistf_fit
arma::vec fast_logistf_fit(arma::mat& x, arma::vec& y, arma::vec& weight, arma::vec& offset, bool firth, arma::uvec& col_fit, arma::vec init, int maxit, int maxstep, int maxhs, double lconv, double gconv, double xconv, bool& isfirthconverge);
RcppExport SEXP _SAIGE_fast_logistf_fit(SEXP xSEXP, SEXP ySEXP, SEXP weightSEXP, SEXP offsetSEXP, SEXP firthSEXP, SEXP col_fitSEXP, SEXP initSEXP, SEXP maxitSEXP, SEXP maxstepSEXP, SEXP maxhsSEXP, SEXP lconvSEXP, SEXP gconvSEXP, SEXP xconvSEXP, SEXP isfirthconvergeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< bool >::type firth(firthSEXP);
    Rcpp::traits::input_parameter< arma::uvec& >::type col_fit(col_fitSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type init(initSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< int >::type maxstep(maxstepSEXP);
    Rcpp::traits::input_parameter< int >::type maxhs(maxhsSEXP);
    Rcpp::traits::input_parameter< double >::type lconv(lconvSEXP);
    Rcpp::traits::input_parameter< double >::type gconv(gconvSEXP);
    Rcpp::traits::input_parameter< double >::type xconv(xconvSEXP);
    Rcpp::traits::input_parameter< bool& >::type isfirthconverge(isfirthconvergeSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_logistf_fit(x, y, weight, offset, firth, col_fit, init, maxit, maxstep, maxhs, lconv, gconv, xconv, isfirthconverge));
    return rcpp_result_gen;
END_RCPP
}
// closeGenoFile
void closeGenoFile(std::string& t_genoType);
RcppExport SEXP _SAIGE_closeGenoFile(SEXP t_genoTypeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string& >::type t_genoType(t_genoTypeSEXP);
    closeGenoFile(t_genoType);
    return R_NilValue;
END_RCPP
}
// openOutfile
bool openOutfile(std::string t_traitType, bool isappend);
RcppExport SEXP _SAIGE_openOutfile(SEXP t_traitTypeSEXP, SEXP isappendSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type t_traitType(t_traitTypeSEXP);
    Rcpp::traits::input_parameter< bool >::type isappend(isappendSEXP);
    rcpp_result_gen = Rcpp::wrap(openOutfile(t_traitType, isappend));
    return rcpp_result_gen;
END_RCPP
}
// openOutfile_singleinGroup
bool openOutfile_singleinGroup(std::string t_traitType, bool t_isImputation, bool isappend, bool t_isMoreOutput);
RcppExport SEXP _SAIGE_openOutfile_singleinGroup(SEXP t_traitTypeSEXP, SEXP t_isImputationSEXP, SEXP isappendSEXP, SEXP t_isMoreOutputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type t_traitType(t_traitTypeSEXP);
    Rcpp::traits::input_parameter< bool >::type t_isImputation(t_isImputationSEXP);
    Rcpp::traits::input_parameter< bool >::type isappend(isappendSEXP);
    Rcpp::traits::input_parameter< bool >::type t_isMoreOutput(t_isMoreOutputSEXP);
    rcpp_result_gen = Rcpp::wrap(openOutfile_singleinGroup(t_traitType, t_isImputation, isappend, t_isMoreOutput));
    return rcpp_result_gen;
END_RCPP
}
// openOutfile_single
bool openOutfile_single(std::string t_traitType, bool t_isImputation, bool isappend, bool t_isMoreOutput, bool t_isGbyE);
RcppExport SEXP _SAIGE_openOutfile_single(SEXP t_traitTypeSEXP, SEXP t_isImputationSEXP, SEXP isappendSEXP, SEXP t_isMoreOutputSEXP, SEXP t_isGbyESEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type t_traitType(t_traitTypeSEXP);
    Rcpp::traits::input_parameter< bool >::type t_isImputation(t_isImputationSEXP);
    Rcpp::traits::input_parameter< bool >::type isappend(isappendSEXP);
    Rcpp::traits::input_parameter< bool >::type t_isMoreOutput(t_isMoreOutputSEXP);
    Rcpp::traits::input_parameter< bool >::type t_isGbyE(t_isGbyESEXP);
    rcpp_result_gen = Rcpp::wrap(openOutfile_single(t_traitType, t_isImputation, isappend, t_isMoreOutput, t_isGbyE));
    return rcpp_result_gen;
END_RCPP
}
// set_flagSparseGRM_cur_SAIGE
void set_flagSparseGRM_cur_SAIGE(bool t_flagSparseGRM_cur);
RcppExport SEXP _SAIGE_set_flagSparseGRM_cur_SAIGE(SEXP t_flagSparseGRM_curSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< bool >::type t_flagSparseGRM_cur(t_flagSparseGRM_curSEXP);
    set_flagSparseGRM_cur_SAIGE(t_flagSparseGRM_cur);
    return R_NilValue;
END_RCPP
}
// set_flagSparseGRM_cur_SAIGE_org
void set_flagSparseGRM_cur_SAIGE_org();
RcppExport SEXP _SAIGE_set_flagSparseGRM_cur_SAIGE_org() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    set_flagSparseGRM_cur_SAIGE_org();
    return R_NilValue;
END_RCPP
}
// copy_singleInGroup
void copy_singleInGroup();
RcppExport SEXP _SAIGE_copy_singleInGroup() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    copy_singleInGroup();
    return R_NilValue;
END_RCPP
}
// set_dup_sample_index
void set_dup_sample_index(arma::uvec& t_dup_sample_Index);
RcppExport SEXP _SAIGE_set_dup_sample_index(SEXP t_dup_sample_IndexSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::uvec& >::type t_dup_sample_Index(t_dup_sample_IndexSEXP);
    set_dup_sample_index(t_dup_sample_Index);
    return R_NilValue;
END_RCPP
}
// setupSparseGRM_new
void setupSparseGRM_new(arma::sp_mat& t_spGRM);
RcppExport SEXP _SAIGE_setupSparseGRM_new(SEXP t_spGRMSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::sp_mat& >::type t_spGRM(t_spGRMSEXP);
    setupSparseGRM_new(t_spGRM);
    return R_NilValue;
END_RCPP
}
// getSparseSigma_new
arma::sp_mat getSparseSigma_new();
RcppExport SEXP _SAIGE_getSparseSigma_new() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(getSparseSigma_new());
    return rcpp_result_gen;
END_RCPP
}
// set_I_longl_mat
void set_I_longl_mat(arma::sp_mat& t_Ilongmat, arma::vec& t_I_longl_vec);
RcppExport SEXP _SAIGE_set_I_longl_mat(SEXP t_IlongmatSEXP, SEXP t_I_longl_vecSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::sp_mat& >::type t_Ilongmat(t_IlongmatSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type t_I_longl_vec(t_I_longl_vecSEXP);
    set_I_longl_mat(t_Ilongmat, t_I_longl_vec);
    return R_NilValue;
END_RCPP
}
// set_I_longl_mat_SAIGEtest
void set_I_longl_mat_SAIGEtest(arma::sp_mat& t_Ilongmat, arma::vec& t_I_longl_vec);
RcppExport SEXP _SAIGE_set_I_longl_mat_SAIGEtest(SEXP t_IlongmatSEXP, SEXP t_I_longl_vecSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::sp_mat& >::type t_Ilongmat(t_IlongmatSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type t_I_longl_vec(t_I_longl_vecSEXP);
    set_I_longl_mat_SAIGEtest(t_Ilongmat, t_I_longl_vec);
    return R_NilValue;
END_RCPP
}
// set_T_longl_mat
void set_T_longl_mat(arma::sp_mat& t_Tlongmat, arma::vec& t_T_longl_vec);
RcppExport SEXP _SAIGE_set_T_longl_mat(SEXP t_TlongmatSEXP, SEXP t_T_longl_vecSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::sp_mat& >::type t_Tlongmat(t_TlongmatSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type t_T_longl_vec(t_T_longl_vecSEXP);
    set_T_longl_mat(t_Tlongmat, t_T_longl_vec);
    return R_NilValue;
END_RCPP
}
// set_T_longl_mat_SAIGEtest
void set_T_longl_mat_SAIGEtest(arma::sp_mat& t_Tlongmat, arma::vec& t_T_longl_vec);
RcppExport SEXP _SAIGE_set_T_longl_mat_SAIGEtest(SEXP t_TlongmatSEXP, SEXP t_T_longl_vecSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::sp_mat& >::type t_Tlongmat(t_TlongmatSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type t_T_longl_vec(t_T_longl_vecSEXP);
    set_T_longl_mat_SAIGEtest(t_Tlongmat, t_T_longl_vec);
    return R_NilValue;
END_RCPP
}
// getCrossprodMatAndKin
arma::fvec getCrossprodMatAndKin(arma::fcolvec& bVec, bool LOCO);
RcppExport SEXP _SAIGE_getCrossprodMatAndKin(SEXP bVecSEXP, SEXP LOCOSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::fcolvec& >::type bVec(bVecSEXP);
    Rcpp::traits::input_parameter< bool >::type LOCO(LOCOSEXP);
    rcpp_result_gen = Rcpp::wrap(getCrossprodMatAndKin(bVec, LOCO));
    return rcpp_result_gen;
END_RCPP
}
// getCrossprod_multiV
arma::fcolvec getCrossprod_multiV(arma::fcolvec& bVec, arma::fvec& wVec, arma::fvec& tauVec, bool LOCO);
RcppExport SEXP _SAIGE_getCrossprod_multiV(SEXP bVecSEXP, SEXP wVecSEXP, SEXP tauVecSEXP, SEXP LOCOSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::fcolvec& >::type bVec(bVecSEXP);
    Rcpp::traits::input_parameter< arma::fvec& >::type wVec(wVecSEXP);
    Rcpp::traits::input_parameter< arma::fvec& >::type tauVec(tauVecSEXP);
    Rcpp::traits::input_parameter< bool >::type LOCO(LOCOSEXP);
    rcpp_result_gen = Rcpp::wrap(getCrossprod_multiV(bVec, wVec, tauVec, LOCO));
    return rcpp_result_gen;
END_RCPP
}
// getDiagOfSigma_multiV
arma::fvec getDiagOfSigma_multiV(arma::fvec& wVec, arma::fvec& tauVec, bool LOCO);
RcppExport SEXP _SAIGE_getDiagOfSigma_multiV(SEXP wVecSEXP, SEXP tauVecSEXP, SEXP LOCOSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::fvec& >::type wVec(wVecSEXP);
    Rcpp::traits::input_parameter< arma::fvec& >::type tauVec(tauVecSEXP);
    Rcpp::traits::input_parameter< bool >::type LOCO(LOCOSEXP);
    rcpp_result_gen = Rcpp::wrap(getDiagOfSigma_multiV(wVec, tauVec, LOCO));
    return rcpp_result_gen;
END_RCPP
}
// gen_sp_Sigma_multiV
void gen_sp_Sigma_multiV(arma::fvec& wVec, arma::fvec& tauVec);
RcppExport SEXP _SAIGE_gen_sp_Sigma_multiV(SEXP wVecSEXP, SEXP tauVecSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::fvec& >::type wVec(wVecSEXP);
    Rcpp::traits::input_parameter< arma::fvec& >::type tauVec(tauVecSEXP);
    gen_sp_Sigma_multiV(wVec, tauVec);
    return R_NilValue;
END_RCPP
}
// getPCG1ofSigmaAndVector_multiV
arma::fvec getPCG1ofSigmaAndVector_multiV(arma::fvec& wVec, arma::fvec& tauVec, arma::fvec& bVec, int maxiterPCG, float tolPCG, bool LOCO);
RcppExport SEXP _SAIGE_getPCG1ofSigmaAndVector_multiV(SEXP wVecSEXP, SEXP tauVecSEXP, SEXP bVecSEXP, SEXP maxiterPCGSEXP, SEXP tolPCGSEXP, SEXP LOCOSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::fvec& >::type wVec(wVecSEXP);
    Rcpp::traits::input_parameter< arma::fvec& >::type tauVec(tauVecSEXP);
    Rcpp::traits::input_parameter< arma::fvec& >::type bVec(bVecSEXP);
    Rcpp::traits::input_parameter< int >::type maxiterPCG(maxiterPCGSEXP);
    Rcpp::traits::input_parameter< float >::type tolPCG(tolPCGSEXP);
    Rcpp::traits::input_parameter< bool >::type LOCO(LOCOSEXP);
    rcpp_result_gen = Rcpp::wrap(getPCG1ofSigmaAndVector_multiV(wVec, tauVec, bVec, maxiterPCG, tolPCG, LOCO));
    return rcpp_result_gen;
END_RCPP
}
// set_seed
void set_seed(unsigned int seed);
RcppExport SEXP _SAIGE_set_seed(SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    set_seed(seed);
    return R_NilValue;
END_RCPP
}
// nb
Rcpp::NumericVector nb(int n);
RcppExport SEXP _SAIGE_nb(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(nb(n));
    return rcpp_result_gen;
END_RCPP
}
// setStartEndIndex
void setStartEndIndex(int startIndex, int endIndex, int chromIndex);
RcppExport SEXP _SAIGE_setStartEndIndex(SEXP startIndexSEXP, SEXP endIndexSEXP, SEXP chromIndexSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type startIndex(startIndexSEXP);
    Rcpp::traits::input_parameter< int >::type endIndex(endIndexSEXP);
    Rcpp::traits::input_parameter< int >::type chromIndex(chromIndexSEXP);
    setStartEndIndex(startIndex, endIndex, chromIndex);
    return R_NilValue;
END_RCPP
}
// setStartEndIndexVec
void setStartEndIndexVec(arma::ivec& startIndex_vec, arma::ivec& endIndex_vec);
RcppExport SEXP _SAIGE_setStartEndIndexVec(SEXP startIndex_vecSEXP, SEXP endIndex_vecSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::ivec& >::type startIndex_vec(startIndex_vecSEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type endIndex_vec(endIndex_vecSEXP);
    setStartEndIndexVec(startIndex_vec, endIndex_vec);
    return R_NilValue;
END_RCPP
}
// calCV
float calCV(arma::fvec& xVec);
RcppExport SEXP _SAIGE_calCV(SEXP xVecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::fvec& >::type xVec(xVecSEXP);
    rcpp_result_gen = Rcpp::wrap(calCV(xVec));
    return rcpp_result_gen;
END_RCPP
}
// getSigma_X_multiV
arma::fmat getSigma_X_multiV(arma::fvec& wVec, arma::fvec& tauVec, arma::fmat& Xmat, int maxiterPCG, float tolPCG, bool LOCO);
RcppExport SEXP _SAIGE_getSigma_X_multiV(SEXP wVecSEXP, SEXP tauVecSEXP, SEXP XmatSEXP, SEXP maxiterPCGSEXP, SEXP tolPCGSEXP, SEXP LOCOSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::fvec& >::type wVec(wVecSEXP);
    Rcpp::traits::input_parameter< arma::fvec& >::type tauVec(tauVecSEXP);
    Rcpp::traits::input_parameter< arma::fmat& >::type Xmat(XmatSEXP);
    Rcpp::traits::input_parameter< int >::type maxiterPCG(maxiterPCGSEXP);
    Rcpp::traits::input_parameter< float >::type tolPCG(tolPCGSEXP);
    Rcpp::traits::input_parameter< bool >::type LOCO(LOCOSEXP);
    rcpp_result_gen = Rcpp::wrap(getSigma_X_multiV(wVec, tauVec, Xmat, maxiterPCG, tolPCG, LOCO));
    return rcpp_result_gen;
END_RCPP
}
// getSigma_G_multiV
arma::fvec getSigma_G_multiV(arma::fvec& wVec, arma::fvec& tauVec, arma::fvec& Gvec, int maxiterPCG, float tolPCG, bool LOCO);
RcppExport SEXP _SAIGE_getSigma_G_multiV(SEXP wVecSEXP, SEXP tauVecSEXP, SEXP GvecSEXP, SEXP maxiterPCGSEXP, SEXP tolPCGSEXP, SEXP LOCOSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::fvec& >::type wVec(wVecSEXP);
    Rcpp::traits::input_parameter< arma::fvec& >::type tauVec(tauVecSEXP);
    Rcpp::traits::input_parameter< arma::fvec& >::type Gvec(GvecSEXP);
    Rcpp::traits::input_parameter< int >::type maxiterPCG(maxiterPCGSEXP);
    Rcpp::traits::input_parameter< float >::type tolPCG(tolPCGSEXP);
    Rcpp::traits::input_parameter< bool >::type LOCO(LOCOSEXP);
    rcpp_result_gen = Rcpp::wrap(getSigma_G_multiV(wVec, tauVec, Gvec, maxiterPCG, tolPCG, LOCO));
    return rcpp_result_gen;
END_RCPP
}
// fitglmmaiRPCG_multiV
Rcpp::List fitglmmaiRPCG_multiV(arma::fvec& Yvec, arma::fmat& Xmat, arma::fvec& wVec, arma::fvec& tauVec, arma::ivec& fixtauVec, arma::fvec& Sigma_iY, arma::fmat& Sigma_iX, arma::fmat& cov, int nrun, int maxiterPCG, float tolPCG, float tol, float traceCVcutoff, bool LOCO);
RcppExport SEXP _SAIGE_fitglmmaiRPCG_multiV(SEXP YvecSEXP, SEXP XmatSEXP, SEXP wVecSEXP, SEXP tauVecSEXP, SEXP fixtauVecSEXP, SEXP Sigma_iYSEXP, SEXP Sigma_iXSEXP, SEXP covSEXP, SEXP nrunSEXP, SEXP maxiterPCGSEXP, SEXP tolPCGSEXP, SEXP tolSEXP, SEXP traceCVcutoffSEXP, SEXP LOCOSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::fvec& >::type Yvec(YvecSEXP);
    Rcpp::traits::input_parameter< arma::fmat& >::type Xmat(XmatSEXP);
    Rcpp::traits::input_parameter< arma::fvec& >::type wVec(wVecSEXP);
    Rcpp::traits::input_parameter< arma::fvec& >::type tauVec(tauVecSEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type fixtauVec(fixtauVecSEXP);
    Rcpp::traits::input_parameter< arma::fvec& >::type Sigma_iY(Sigma_iYSEXP);
    Rcpp::traits::input_parameter< arma::fmat& >::type Sigma_iX(Sigma_iXSEXP);
    Rcpp::traits::input_parameter< arma::fmat& >::type cov(covSEXP);
    Rcpp::traits::input_parameter< int >::type nrun(nrunSEXP);
    Rcpp::traits::input_parameter< int >::type maxiterPCG(maxiterPCGSEXP);
    Rcpp::traits::input_parameter< float >::type tolPCG(tolPCGSEXP);
    Rcpp::traits::input_parameter< float >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< float >::type traceCVcutoff(traceCVcutoffSEXP);
    Rcpp::traits::input_parameter< bool >::type LOCO(LOCOSEXP);
    rcpp_result_gen = Rcpp::wrap(fitglmmaiRPCG_multiV(Yvec, Xmat, wVec, tauVec, fixtauVec, Sigma_iY, Sigma_iX, cov, nrun, maxiterPCG, tolPCG, tol, traceCVcutoff, LOCO));
    return rcpp_result_gen;
END_RCPP
}
// getMeanDiagofKmat
arma::fvec getMeanDiagofKmat(bool LOCO);
RcppExport SEXP _SAIGE_getMeanDiagofKmat(SEXP LOCOSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< bool >::type LOCO(LOCOSEXP);
    rcpp_result_gen = Rcpp::wrap(getMeanDiagofKmat(LOCO));
    return rcpp_result_gen;
END_RCPP
}
// getAIScore_multiV
Rcpp::List getAIScore_multiV(arma::fvec& Yvec, arma::fmat& Xmat, arma::fvec& wVec, arma::fvec& tauVec, arma::ivec& fixtauVec, arma::fvec& Sigma_iY, arma::fmat& Sigma_iX, arma::fmat& cov, int nrun, int maxiterPCG, float tolPCG, float traceCVcutoff, bool LOCO);
RcppExport SEXP _SAIGE_getAIScore_multiV(SEXP YvecSEXP, SEXP XmatSEXP, SEXP wVecSEXP, SEXP tauVecSEXP, SEXP fixtauVecSEXP, SEXP Sigma_iYSEXP, SEXP Sigma_iXSEXP, SEXP covSEXP, SEXP nrunSEXP, SEXP maxiterPCGSEXP, SEXP tolPCGSEXP, SEXP traceCVcutoffSEXP, SEXP LOCOSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::fvec& >::type Yvec(YvecSEXP);
    Rcpp::traits::input_parameter< arma::fmat& >::type Xmat(XmatSEXP);
    Rcpp::traits::input_parameter< arma::fvec& >::type wVec(wVecSEXP);
    Rcpp::traits::input_parameter< arma::fvec& >::type tauVec(tauVecSEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type fixtauVec(fixtauVecSEXP);
    Rcpp::traits::input_parameter< arma::fvec& >::type Sigma_iY(Sigma_iYSEXP);
    Rcpp::traits::input_parameter< arma::fmat& >::type Sigma_iX(Sigma_iXSEXP);
    Rcpp::traits::input_parameter< arma::fmat& >::type cov(covSEXP);
    Rcpp::traits::input_parameter< int >::type nrun(nrunSEXP);
    Rcpp::traits::input_parameter< int >::type maxiterPCG(maxiterPCGSEXP);
    Rcpp::traits::input_parameter< float >::type tolPCG(tolPCGSEXP);
    Rcpp::traits::input_parameter< float >::type traceCVcutoff(traceCVcutoffSEXP);
    Rcpp::traits::input_parameter< bool >::type LOCO(LOCOSEXP);
    rcpp_result_gen = Rcpp::wrap(getAIScore_multiV(Yvec, Xmat, wVec, tauVec, fixtauVec, Sigma_iY, Sigma_iX, cov, nrun, maxiterPCG, tolPCG, traceCVcutoff, LOCO));
    return rcpp_result_gen;
END_RCPP
}
// GetTrace_multiV
arma::fvec GetTrace_multiV(arma::fmat Sigma_iX, arma::fmat& Xmat, arma::fvec& wVec, arma::fvec& tauVec, arma::ivec& fixtauVec, arma::fmat& cov1, int nrun, int maxiterPCG, float tolPCG, float traceCVcutoff, bool LOCO);
RcppExport SEXP _SAIGE_GetTrace_multiV(SEXP Sigma_iXSEXP, SEXP XmatSEXP, SEXP wVecSEXP, SEXP tauVecSEXP, SEXP fixtauVecSEXP, SEXP cov1SEXP, SEXP nrunSEXP, SEXP maxiterPCGSEXP, SEXP tolPCGSEXP, SEXP traceCVcutoffSEXP, SEXP LOCOSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::fmat >::type Sigma_iX(Sigma_iXSEXP);
    Rcpp::traits::input_parameter< arma::fmat& >::type Xmat(XmatSEXP);
    Rcpp::traits::input_parameter< arma::fvec& >::type wVec(wVecSEXP);
    Rcpp::traits::input_parameter< arma::fvec& >::type tauVec(tauVecSEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type fixtauVec(fixtauVecSEXP);
    Rcpp::traits::input_parameter< arma::fmat& >::type cov1(cov1SEXP);
    Rcpp::traits::input_parameter< int >::type nrun(nrunSEXP);
    Rcpp::traits::input_parameter< int >::type maxiterPCG(maxiterPCGSEXP);
    Rcpp::traits::input_parameter< float >::type tolPCG(tolPCGSEXP);
    Rcpp::traits::input_parameter< float >::type traceCVcutoff(traceCVcutoffSEXP);
    Rcpp::traits::input_parameter< bool >::type LOCO(LOCOSEXP);
    rcpp_result_gen = Rcpp::wrap(GetTrace_multiV(Sigma_iX, Xmat, wVec, tauVec, fixtauVec, cov1, nrun, maxiterPCG, tolPCG, traceCVcutoff, LOCO));
    return rcpp_result_gen;
END_RCPP
}
// getCoefficients_multiV
Rcpp::List getCoefficients_multiV(arma::fvec& Yvec, arma::fmat& Xmat, arma::fvec& wVec, arma::fvec& tauVec, int maxiterPCG, float tolPCG, bool LOCO);
RcppExport SEXP _SAIGE_getCoefficients_multiV(SEXP YvecSEXP, SEXP XmatSEXP, SEXP wVecSEXP, SEXP tauVecSEXP, SEXP maxiterPCGSEXP, SEXP tolPCGSEXP, SEXP LOCOSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::fvec& >::type Yvec(YvecSEXP);
    Rcpp::traits::input_parameter< arma::fmat& >::type Xmat(XmatSEXP);
    Rcpp::traits::input_parameter< arma::fvec& >::type wVec(wVecSEXP);
    Rcpp::traits::input_parameter< arma::fvec& >::type tauVec(tauVecSEXP);
    Rcpp::traits::input_parameter< int >::type maxiterPCG(maxiterPCGSEXP);
    Rcpp::traits::input_parameter< float >::type tolPCG(tolPCGSEXP);
    Rcpp::traits::input_parameter< bool >::type LOCO(LOCOSEXP);
    rcpp_result_gen = Rcpp::wrap(getCoefficients_multiV(Yvec, Xmat, wVec, tauVec, maxiterPCG, tolPCG, LOCO));
    return rcpp_result_gen;
END_RCPP
}
// setminMAC_VarianceRatio
void setminMAC_VarianceRatio(float t_minMACVarRatio, float t_maxMACVarRatio, bool t_isVarianceRatioinGeno);
RcppExport SEXP _SAIGE_setminMAC_VarianceRatio(SEXP t_minMACVarRatioSEXP, SEXP t_maxMACVarRatioSEXP, SEXP t_isVarianceRatioinGenoSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< float >::type t_minMACVarRatio(t_minMACVarRatioSEXP);
    Rcpp::traits::input_parameter< float >::type t_maxMACVarRatio(t_maxMACVarRatioSEXP);
    Rcpp::traits::input_parameter< bool >::type t_isVarianceRatioinGeno(t_isVarianceRatioinGenoSEXP);
    setminMAC_VarianceRatio(t_minMACVarRatio, t_maxMACVarRatio, t_isVarianceRatioinGeno);
    return R_NilValue;
END_RCPP
}
// get_GRMdiagVec
arma::fvec get_GRMdiagVec();
RcppExport SEXP _SAIGE_get_GRMdiagVec() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(get_GRMdiagVec());
    return rcpp_result_gen;
END_RCPP
}
// setminMAFforGRM
void setminMAFforGRM(float minMAFforGRM);
RcppExport SEXP _SAIGE_setminMAFforGRM(SEXP minMAFforGRMSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< float >::type minMAFforGRM(minMAFforGRMSEXP);
    setminMAFforGRM(minMAFforGRM);
    return R_NilValue;
END_RCPP
}
// setmaxMissingRateforGRM
void setmaxMissingRateforGRM(float maxMissingforGRM);
RcppExport SEXP _SAIGE_setmaxMissingRateforGRM(SEXP maxMissingforGRMSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< float >::type maxMissingforGRM(maxMissingforGRMSEXP);
    setmaxMissingRateforGRM(maxMissingforGRM);
    return R_NilValue;
END_RCPP
}
// set_Diagof_StdGeno_LOCO
void set_Diagof_StdGeno_LOCO();
RcppExport SEXP _SAIGE_set_Diagof_StdGeno_LOCO() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    set_Diagof_StdGeno_LOCO();
    return R_NilValue;
END_RCPP
}
// get_DiagofKin
arma::fvec get_DiagofKin();
RcppExport SEXP _SAIGE_get_DiagofKin() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(get_DiagofKin());
    return rcpp_result_gen;
END_RCPP
}
// parallelCrossProd_usingSubMarker
arma::fvec parallelCrossProd_usingSubMarker(arma::fcolvec& bVec);
RcppExport SEXP _SAIGE_parallelCrossProd_usingSubMarker(SEXP bVecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::fcolvec& >::type bVec(bVecSEXP);
    rcpp_result_gen = Rcpp::wrap(parallelCrossProd_usingSubMarker(bVec));
    return rcpp_result_gen;
END_RCPP
}
// getCrossprodMatAndKin_usingSubMarker
arma::fvec getCrossprodMatAndKin_usingSubMarker(arma::fcolvec& bVec);
RcppExport SEXP _SAIGE_getCrossprodMatAndKin_usingSubMarker(SEXP bVecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::fcolvec& >::type bVec(bVecSEXP);
    rcpp_result_gen = Rcpp::wrap(getCrossprodMatAndKin_usingSubMarker(bVec));
    return rcpp_result_gen;
END_RCPP
}
// parallelInnerProduct
float parallelInnerProduct(std::vector<float>& x, std::vector<float>& y);
RcppExport SEXP _SAIGE_parallelInnerProduct(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<float>& >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::vector<float>& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(parallelInnerProduct(x, y));
    return rcpp_result_gen;
END_RCPP
}
// createSparseKin
Rcpp::List createSparseKin(arma::fvec& markerIndexVec, float relatednessCutoff, arma::fvec& wVec, arma::fvec& tauVec);
RcppExport SEXP _SAIGE_createSparseKin(SEXP markerIndexVecSEXP, SEXP relatednessCutoffSEXP, SEXP wVecSEXP, SEXP tauVecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::fvec& >::type markerIndexVec(markerIndexVecSEXP);
    Rcpp::traits::input_parameter< float >::type relatednessCutoff(relatednessCutoffSEXP);
    Rcpp::traits::input_parameter< arma::fvec& >::type wVec(wVecSEXP);
    Rcpp::traits::input_parameter< arma::fvec& >::type tauVec(tauVecSEXP);
    rcpp_result_gen = Rcpp::wrap(createSparseKin(markerIndexVec, relatednessCutoff, wVec, tauVec));
    return rcpp_result_gen;
END_RCPP
}
// refineKin
Rcpp::List refineKin(float relatednessCutoff);
RcppExport SEXP _SAIGE_refineKin(SEXP relatednessCutoffSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< float >::type relatednessCutoff(relatednessCutoffSEXP);
    rcpp_result_gen = Rcpp::wrap(refineKin(relatednessCutoff));
    return rcpp_result_gen;
END_RCPP
}
// getColfromStdGenoMultiMarkersMat
arma::fmat getColfromStdGenoMultiMarkersMat(arma::uvec& a);
RcppExport SEXP _SAIGE_getColfromStdGenoMultiMarkersMat(SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::uvec& >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(getColfromStdGenoMultiMarkersMat(a));
    return rcpp_result_gen;
END_RCPP
}
// getNColStdGenoMultiMarkersMat
int getNColStdGenoMultiMarkersMat();
RcppExport SEXP _SAIGE_getNColStdGenoMultiMarkersMat() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(getNColStdGenoMultiMarkersMat());
    return rcpp_result_gen;
END_RCPP
}
// getNRowStdGenoMultiMarkersMat
int getNRowStdGenoMultiMarkersMat();
RcppExport SEXP _SAIGE_getNRowStdGenoMultiMarkersMat() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(getNRowStdGenoMultiMarkersMat());
    return rcpp_result_gen;
END_RCPP
}
// setSubMarkerIndex
void setSubMarkerIndex(arma::ivec& subMarkerIndexRandom);
RcppExport SEXP _SAIGE_setSubMarkerIndex(SEXP subMarkerIndexRandomSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::ivec& >::type subMarkerIndexRandom(subMarkerIndexRandomSEXP);
    setSubMarkerIndex(subMarkerIndexRandom);
    return R_NilValue;
END_RCPP
}
// setRelatednessCutoff
void setRelatednessCutoff(float a);
RcppExport SEXP _SAIGE_setRelatednessCutoff(SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< float >::type a(aSEXP);
    setRelatednessCutoff(a);
    return R_NilValue;
END_RCPP
}
// innerProduct
double innerProduct(Rcpp::NumericVector x, Rcpp::NumericVector y);
RcppExport SEXP _SAIGE_innerProduct(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(innerProduct(x, y));
    return rcpp_result_gen;
END_RCPP
}
// getDiagOfSigma_noV
arma::fvec getDiagOfSigma_noV(arma::fvec& wVec, arma::fvec& tauVec, bool LOCO);
RcppExport SEXP _SAIGE_getDiagOfSigma_noV(SEXP wVecSEXP, SEXP tauVecSEXP, SEXP LOCOSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::fvec& >::type wVec(wVecSEXP);
    Rcpp::traits::input_parameter< arma::fvec& >::type tauVec(tauVecSEXP);
    Rcpp::traits::input_parameter< bool >::type LOCO(LOCOSEXP);
    rcpp_result_gen = Rcpp::wrap(getDiagOfSigma_noV(wVec, tauVec, LOCO));
    return rcpp_result_gen;
END_RCPP
}
// getDiagOfSigma_V
arma::fvec getDiagOfSigma_V(arma::fvec& wVec, float tauVal, float tauVal0);
RcppExport SEXP _SAIGE_getDiagOfSigma_V(SEXP wVecSEXP, SEXP tauValSEXP, SEXP tauVal0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::fvec& >::type wVec(wVecSEXP);
    Rcpp::traits::input_parameter< float >::type tauVal(tauValSEXP);
    Rcpp::traits::input_parameter< float >::type tauVal0(tauVal0SEXP);
    rcpp_result_gen = Rcpp::wrap(getDiagOfSigma_V(wVec, tauVal, tauVal0));
    return rcpp_result_gen;
END_RCPP
}
// getCrossprod_noV
arma::fcolvec getCrossprod_noV(arma::fcolvec& bVec, arma::fvec& wVec, arma::fvec& tauVec, bool LOCO);
RcppExport SEXP _SAIGE_getCrossprod_noV(SEXP bVecSEXP, SEXP wVecSEXP, SEXP tauVecSEXP, SEXP LOCOSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::fcolvec& >::type bVec(bVecSEXP);
    Rcpp::traits::input_parameter< arma::fvec& >::type wVec(wVecSEXP);
    Rcpp::traits::input_parameter< arma::fvec& >::type tauVec(tauVecSEXP);
    Rcpp::traits::input_parameter< bool >::type LOCO(LOCOSEXP);
    rcpp_result_gen = Rcpp::wrap(getCrossprod_noV(bVec, wVec, tauVec, LOCO));
    return rcpp_result_gen;
END_RCPP
}
// getCrossprod_V
arma::fcolvec getCrossprod_V(arma::fcolvec& bVec, arma::fvec& wVec, float tauVal, float tauVal0);
RcppExport SEXP _SAIGE_getCrossprod_V(SEXP bVecSEXP, SEXP wVecSEXP, SEXP tauValSEXP, SEXP tauVal0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::fcolvec& >::type bVec(bVecSEXP);
    Rcpp::traits::input_parameter< arma::fvec& >::type wVec(wVecSEXP);
    Rcpp::traits::input_parameter< float >::type tauVal(tauValSEXP);
    Rcpp::traits::input_parameter< float >::type tauVal0(tauVal0SEXP);
    rcpp_result_gen = Rcpp::wrap(getCrossprod_V(bVec, wVec, tauVal, tauVal0));
    return rcpp_result_gen;
END_RCPP
}
// getPCG1ofSigmaAndVector_noV
arma::fvec getPCG1ofSigmaAndVector_noV(arma::fvec& wVec, arma::fvec& tauVec, arma::fvec& bVec, int maxiterPCG, float tolPCG, bool LOCO);
RcppExport SEXP _SAIGE_getPCG1ofSigmaAndVector_noV(SEXP wVecSEXP, SEXP tauVecSEXP, SEXP bVecSEXP, SEXP maxiterPCGSEXP, SEXP tolPCGSEXP, SEXP LOCOSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::fvec& >::type wVec(wVecSEXP);
    Rcpp::traits::input_parameter< arma::fvec& >::type tauVec(tauVecSEXP);
    Rcpp::traits::input_parameter< arma::fvec& >::type bVec(bVecSEXP);
    Rcpp::traits::input_parameter< int >::type maxiterPCG(maxiterPCGSEXP);
    Rcpp::traits::input_parameter< float >::type tolPCG(tolPCGSEXP);
    Rcpp::traits::input_parameter< bool >::type LOCO(LOCOSEXP);
    rcpp_result_gen = Rcpp::wrap(getPCG1ofSigmaAndVector_noV(wVec, tauVec, bVec, maxiterPCG, tolPCG, LOCO));
    return rcpp_result_gen;
END_RCPP
}
// getPCG1ofSigmaAndVector_V
arma::fvec getPCG1ofSigmaAndVector_V(arma::fvec& wVec, float tauVal, float tauVal0, arma::fvec& bVec, int maxiterPCG, float tolPCG);
RcppExport SEXP _SAIGE_getPCG1ofSigmaAndVector_V(SEXP wVecSEXP, SEXP tauValSEXP, SEXP tauVal0SEXP, SEXP bVecSEXP, SEXP maxiterPCGSEXP, SEXP tolPCGSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::fvec& >::type wVec(wVecSEXP);
    Rcpp::traits::input_parameter< float >::type tauVal(tauValSEXP);
    Rcpp::traits::input_parameter< float >::type tauVal0(tauVal0SEXP);
    Rcpp::traits::input_parameter< arma::fvec& >::type bVec(bVecSEXP);
    Rcpp::traits::input_parameter< int >::type maxiterPCG(maxiterPCGSEXP);
    Rcpp::traits::input_parameter< float >::type tolPCG(tolPCGSEXP);
    rcpp_result_gen = Rcpp::wrap(getPCG1ofSigmaAndVector_V(wVec, tauVal, tauVal0, bVec, maxiterPCG, tolPCG));
    return rcpp_result_gen;
END_RCPP
}
// getSigma_G_V
arma::fvec getSigma_G_V(arma::fvec& wVec, float tauVal, float tauVal0, arma::fvec& Gvec, int maxiterPCG, float tolPCG);
RcppExport SEXP _SAIGE_getSigma_G_V(SEXP wVecSEXP, SEXP tauValSEXP, SEXP tauVal0SEXP, SEXP GvecSEXP, SEXP maxiterPCGSEXP, SEXP tolPCGSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::fvec& >::type wVec(wVecSEXP);
    Rcpp::traits::input_parameter< float >::type tauVal(tauValSEXP);
    Rcpp::traits::input_parameter< float >::type tauVal0(tauVal0SEXP);
    Rcpp::traits::input_parameter< arma::fvec& >::type Gvec(GvecSEXP);
    Rcpp::traits::input_parameter< int >::type maxiterPCG(maxiterPCGSEXP);
    Rcpp::traits::input_parameter< float >::type tolPCG(tolPCGSEXP);
    rcpp_result_gen = Rcpp::wrap(getSigma_G_V(wVec, tauVal, tauVal0, Gvec, maxiterPCG, tolPCG));
    return rcpp_result_gen;
END_RCPP
}
// getSigma_G_noV
arma::fvec getSigma_G_noV(arma::fvec& wVec, arma::fvec& tauVec, arma::fvec& Gvec, int maxiterPCG, float tolPCG, bool LOCO);
RcppExport SEXP _SAIGE_getSigma_G_noV(SEXP wVecSEXP, SEXP tauVecSEXP, SEXP GvecSEXP, SEXP maxiterPCGSEXP, SEXP tolPCGSEXP, SEXP LOCOSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::fvec& >::type wVec(wVecSEXP);
    Rcpp::traits::input_parameter< arma::fvec& >::type tauVec(tauVecSEXP);
    Rcpp::traits::input_parameter< arma::fvec& >::type Gvec(GvecSEXP);
    Rcpp::traits::input_parameter< int >::type maxiterPCG(maxiterPCGSEXP);
    Rcpp::traits::input_parameter< float >::type tolPCG(tolPCGSEXP);
    Rcpp::traits::input_parameter< bool >::type LOCO(LOCOSEXP);
    rcpp_result_gen = Rcpp::wrap(getSigma_G_noV(wVec, tauVec, Gvec, maxiterPCG, tolPCG, LOCO));
    return rcpp_result_gen;
END_RCPP
}
// set_useGRMtoFitNULL
void set_useGRMtoFitNULL(bool useGRMtoFitNULL);
RcppExport SEXP _SAIGE_set_useGRMtoFitNULL(SEXP useGRMtoFitNULLSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< bool >::type useGRMtoFitNULL(useGRMtoFitNULLSEXP);
    set_useGRMtoFitNULL(useGRMtoFitNULL);
    return R_NilValue;
END_RCPP
}
// set_isSparseGRM
void set_isSparseGRM(bool t_isSparseGRM);
RcppExport SEXP _SAIGE_set_isSparseGRM(SEXP t_isSparseGRMSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< bool >::type t_isSparseGRM(t_isSparseGRMSEXP);
    set_isSparseGRM(t_isSparseGRM);
    return R_NilValue;
END_RCPP
}
// set_store_sigma
void set_store_sigma(bool isstoreSigma);
RcppExport SEXP _SAIGE_set_store_sigma(SEXP isstoreSigmaSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< bool >::type isstoreSigma(isstoreSigmaSEXP);
    set_store_sigma(isstoreSigma);
    return R_NilValue;
END_RCPP
}
// set_num_Kmat
void set_num_Kmat(int t_num_Kmat);
RcppExport SEXP _SAIGE_set_num_Kmat(SEXP t_num_KmatSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type t_num_Kmat(t_num_KmatSEXP);
    set_num_Kmat(t_num_Kmat);
    return R_NilValue;
END_RCPP
}
// get_numofV
int get_numofV();
RcppExport SEXP _SAIGE_get_numofV() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(get_numofV());
    return rcpp_result_gen;
END_RCPP
}
// set_covarianceidx_Mat
arma::umat set_covarianceidx_Mat();
RcppExport SEXP _SAIGE_set_covarianceidx_Mat() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(set_covarianceidx_Mat());
    return rcpp_result_gen;
END_RCPP
}
// closeGenoFile_plink
void closeGenoFile_plink();
RcppExport SEXP _SAIGE_closeGenoFile_plink() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    closeGenoFile_plink();
    return R_NilValue;
END_RCPP
}
// gettotalMarker
int gettotalMarker();
RcppExport SEXP _SAIGE_gettotalMarker() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(gettotalMarker());
    return rcpp_result_gen;
END_RCPP
}
// getAlleleFreqVec
arma::fvec getAlleleFreqVec();
RcppExport SEXP _SAIGE_getAlleleFreqVec() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(getAlleleFreqVec());
    return rcpp_result_gen;
END_RCPP
}
// getMACVec
arma::ivec getMACVec();
RcppExport SEXP _SAIGE_getMACVec() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(getMACVec());
    return rcpp_result_gen;
END_RCPP
}
// getMACVec_forVarRatio
arma::ivec getMACVec_forVarRatio();
RcppExport SEXP _SAIGE_getMACVec_forVarRatio() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(getMACVec_forVarRatio());
    return rcpp_result_gen;
END_RCPP
}
// getIndexVec_forVarRatio
arma::ivec getIndexVec_forVarRatio();
RcppExport SEXP _SAIGE_getIndexVec_forVarRatio() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(getIndexVec_forVarRatio());
    return rcpp_result_gen;
END_RCPP
}
// getIsVarRatioGeno
bool getIsVarRatioGeno();
RcppExport SEXP _SAIGE_getIsVarRatioGeno() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(getIsVarRatioGeno());
    return rcpp_result_gen;
END_RCPP
}
// getSubMarkerIndex
arma::ivec getSubMarkerIndex();
RcppExport SEXP _SAIGE_getSubMarkerIndex() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(getSubMarkerIndex());
    return rcpp_result_gen;
END_RCPP
}
// getQCdMarkerIndex
std::vector<bool> getQCdMarkerIndex();
RcppExport SEXP _SAIGE_getQCdMarkerIndex() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(getQCdMarkerIndex());
    return rcpp_result_gen;
END_RCPP
}
// getSubMarkerNum
int getSubMarkerNum();
RcppExport SEXP _SAIGE_getSubMarkerNum() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(getSubMarkerNum());
    return rcpp_result_gen;
END_RCPP
}
// getNnomissingOut
int getNnomissingOut();
RcppExport SEXP _SAIGE_getNnomissingOut() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(getNnomissingOut());
    return rcpp_result_gen;
END_RCPP
}
// getMsub_MAFge_minMAFtoConstructGRM
int getMsub_MAFge_minMAFtoConstructGRM();
RcppExport SEXP _SAIGE_getMsub_MAFge_minMAFtoConstructGRM() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(getMsub_MAFge_minMAFtoConstructGRM());
    return rcpp_result_gen;
END_RCPP
}
// getMsub_MAFge_minMAFtoConstructGRM_singleChr
int getMsub_MAFge_minMAFtoConstructGRM_singleChr();
RcppExport SEXP _SAIGE_getMsub_MAFge_minMAFtoConstructGRM_singleChr() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(getMsub_MAFge_minMAFtoConstructGRM_singleChr());
    return rcpp_result_gen;
END_RCPP
}
// Get_MultiMarkersBySample_StdGeno_Mat
void Get_MultiMarkersBySample_StdGeno_Mat();
RcppExport SEXP _SAIGE_Get_MultiMarkersBySample_StdGeno_Mat() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Get_MultiMarkersBySample_StdGeno_Mat();
    return R_NilValue;
END_RCPP
}
// Get_MultiMarkersBySample_StdGeno
void Get_MultiMarkersBySample_StdGeno(arma::fvec& markerIndexVec, std::vector<float>& stdGenoMultiMarkers);
RcppExport SEXP _SAIGE_Get_MultiMarkersBySample_StdGeno(SEXP markerIndexVecSEXP, SEXP stdGenoMultiMarkersSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::fvec& >::type markerIndexVec(markerIndexVecSEXP);
    Rcpp::traits::input_parameter< std::vector<float>& >::type stdGenoMultiMarkers(stdGenoMultiMarkersSEXP);
    Get_MultiMarkersBySample_StdGeno(markerIndexVec, stdGenoMultiMarkers);
    return R_NilValue;
END_RCPP
}
// parallelCrossProd
arma::fvec parallelCrossProd(arma::fcolvec& bVec);
RcppExport SEXP _SAIGE_parallelCrossProd(SEXP bVecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::fcolvec& >::type bVec(bVecSEXP);
    rcpp_result_gen = Rcpp::wrap(parallelCrossProd(bVec));
    return rcpp_result_gen;
END_RCPP
}
// innerProductFun
float innerProductFun(std::vector<float>& x, std::vector<float>& y);
RcppExport SEXP _SAIGE_innerProductFun(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<float>& >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::vector<float>& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(innerProductFun(x, y));
    return rcpp_result_gen;
END_RCPP
}
// parallelCrossProd_full
arma::fvec parallelCrossProd_full(arma::fcolvec& bVec, int& markerNum);
RcppExport SEXP _SAIGE_parallelCrossProd_full(SEXP bVecSEXP, SEXP markerNumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::fcolvec& >::type bVec(bVecSEXP);
    Rcpp::traits::input_parameter< int& >::type markerNum(markerNumSEXP);
    rcpp_result_gen = Rcpp::wrap(parallelCrossProd_full(bVec, markerNum));
    return rcpp_result_gen;
END_RCPP
}
// parallelCrossProd_LOCO
arma::fvec parallelCrossProd_LOCO(arma::fcolvec& bVec);
RcppExport SEXP _SAIGE_parallelCrossProd_LOCO(SEXP bVecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::fcolvec& >::type bVec(bVecSEXP);
    rcpp_result_gen = Rcpp::wrap(parallelCrossProd_LOCO(bVec));
    return rcpp_result_gen;
END_RCPP
}
// printComb
void printComb(int N);
RcppExport SEXP _SAIGE_printComb(SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    printComb(N);
    return R_NilValue;
END_RCPP
}
// findIndiceRelatedSample
void findIndiceRelatedSample();
RcppExport SEXP _SAIGE_findIndiceRelatedSample() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    findIndiceRelatedSample();
    return R_NilValue;
END_RCPP
}
// parallelcalsparseGRM
void parallelcalsparseGRM(arma::fvec& GRMvec);
RcppExport SEXP _SAIGE_parallelcalsparseGRM(SEXP GRMvecSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::fvec& >::type GRMvec(GRMvecSEXP);
    parallelcalsparseGRM(GRMvec);
    return R_NilValue;
END_RCPP
}
// parallelsumTwoVec
void parallelsumTwoVec(arma::fvec& x);
RcppExport SEXP _SAIGE_parallelsumTwoVec(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::fvec& >::type x(xSEXP);
    parallelsumTwoVec(x);
    return R_NilValue;
END_RCPP
}
// setgenoNULL
void setgenoNULL();
RcppExport SEXP _SAIGE_setgenoNULL() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    setgenoNULL();
    return R_NilValue;
END_RCPP
}
// setgeno
void setgeno(std::string bedfile, std::string bimfile, std::string famfile, std::vector<int>& subSampleInGeno, std::vector<bool>& indicatorGenoSamplesWithPheno, float memoryChunk, bool isDiagofKinSetAsOne);
RcppExport SEXP _SAIGE_setgeno(SEXP bedfileSEXP, SEXP bimfileSEXP, SEXP famfileSEXP, SEXP subSampleInGenoSEXP, SEXP indicatorGenoSamplesWithPhenoSEXP, SEXP memoryChunkSEXP, SEXP isDiagofKinSetAsOneSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type bedfile(bedfileSEXP);
    Rcpp::traits::input_parameter< std::string >::type bimfile(bimfileSEXP);
    Rcpp::traits::input_parameter< std::string >::type famfile(famfileSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type subSampleInGeno(subSampleInGenoSEXP);
    Rcpp::traits::input_parameter< std::vector<bool>& >::type indicatorGenoSamplesWithPheno(indicatorGenoSamplesWithPhenoSEXP);
    Rcpp::traits::input_parameter< float >::type memoryChunk(memoryChunkSEXP);
    Rcpp::traits::input_parameter< bool >::type isDiagofKinSetAsOne(isDiagofKinSetAsOneSEXP);
    setgeno(bedfile, bimfile, famfile, subSampleInGeno, indicatorGenoSamplesWithPheno, memoryChunk, isDiagofKinSetAsOne);
    return R_NilValue;
END_RCPP
}
// Get_OneSNP_Geno
arma::ivec Get_OneSNP_Geno(int SNPIdx);
RcppExport SEXP _SAIGE_Get_OneSNP_Geno(SEXP SNPIdxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type SNPIdx(SNPIdxSEXP);
    rcpp_result_gen = Rcpp::wrap(Get_OneSNP_Geno(SNPIdx));
    return rcpp_result_gen;
END_RCPP
}
// Get_OneSNP_Geno_forVarRatio
arma::ivec Get_OneSNP_Geno_forVarRatio(int SNPIdx);
RcppExport SEXP _SAIGE_Get_OneSNP_Geno_forVarRatio(SEXP SNPIdxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type SNPIdx(SNPIdxSEXP);
    rcpp_result_gen = Rcpp::wrap(Get_OneSNP_Geno_forVarRatio(SNPIdx));
    return rcpp_result_gen;
END_RCPP
}
// Get_OneSNP_StdGeno
arma::fvec Get_OneSNP_StdGeno(int SNPIdx);
RcppExport SEXP _SAIGE_Get_OneSNP_StdGeno(SEXP SNPIdxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type SNPIdx(SNPIdxSEXP);
    rcpp_result_gen = Rcpp::wrap(Get_OneSNP_StdGeno(SNPIdx));
    return rcpp_result_gen;
END_RCPP
}
// print_g_n_unique
void print_g_n_unique();
RcppExport SEXP _SAIGE_print_g_n_unique() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    print_g_n_unique();
    return R_NilValue;
END_RCPP
}
// get_sp_Sigma_to_R
arma::sp_fmat get_sp_Sigma_to_R();
RcppExport SEXP _SAIGE_get_sp_Sigma_to_R() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(get_sp_Sigma_to_R());
    return rcpp_result_gen;
END_RCPP
}
// get_SKAT_pvalue_Rcpp
Rcpp::List get_SKAT_pvalue_Rcpp(arma::vec& Score, arma::mat& Phi, arma::vec& r_corr);
RcppExport SEXP _SAIGE_get_SKAT_pvalue_Rcpp(SEXP ScoreSEXP, SEXP PhiSEXP, SEXP r_corrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type Score(ScoreSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Phi(PhiSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type r_corr(r_corrSEXP);
    rcpp_result_gen = Rcpp::wrap(get_SKAT_pvalue_Rcpp(Score, Phi, r_corr));
    return rcpp_result_gen;
END_RCPP
}
// mainMarkerInCPP_multi
void mainMarkerInCPP_multi(std::string& t_genoType, std::vector<std::string>& t_traitType, std::vector<std::string>& t_genoIndex_prev, std::vector<std::string>& t_genoIndex, bool& t_isMoreOutput, bool& t_isImputation, bool& t_isFirth);
RcppExport SEXP _SAIGE_mainMarkerInCPP_multi(SEXP t_genoTypeSEXP, SEXP t_traitTypeSEXP, SEXP t_genoIndex_prevSEXP, SEXP t_genoIndexSEXP, SEXP t_isMoreOutputSEXP, SEXP t_isImputationSEXP, SEXP t_isFirthSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string& >::type t_genoType(t_genoTypeSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string>& >::type t_traitType(t_traitTypeSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string>& >::type t_genoIndex_prev(t_genoIndex_prevSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string>& >::type t_genoIndex(t_genoIndexSEXP);
    Rcpp::traits::input_parameter< bool& >::type t_isMoreOutput(t_isMoreOutputSEXP);
    Rcpp::traits::input_parameter< bool& >::type t_isImputation(t_isImputationSEXP);
    Rcpp::traits::input_parameter< bool& >::type t_isFirth(t_isFirthSEXP);
    mainMarkerInCPP_multi(t_genoType, t_traitType, t_genoIndex_prev, t_genoIndex, t_isMoreOutput, t_isImputation, t_isFirth);
    return R_NilValue;
END_RCPP
}
// getOneMarkerID_VCF
Rcpp::List getOneMarkerID_VCF(std::string& t_ref, std::string& t_alt, std::string& t_marker, uint32_t& t_pd, std::string& t_chr);
RcppExport SEXP _SAIGE_getOneMarkerID_VCF(SEXP t_refSEXP, SEXP t_altSEXP, SEXP t_markerSEXP, SEXP t_pdSEXP, SEXP t_chrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string& >::type t_ref(t_refSEXP);
    Rcpp::traits::input_parameter< std::string& >::type t_alt(t_altSEXP);
    Rcpp::traits::input_parameter< std::string& >::type t_marker(t_markerSEXP);
    Rcpp::traits::input_parameter< uint32_t& >::type t_pd(t_pdSEXP);
    Rcpp::traits::input_parameter< std::string& >::type t_chr(t_chrSEXP);
    rcpp_result_gen = Rcpp::wrap(getOneMarkerID_VCF(t_ref, t_alt, t_marker, t_pd, t_chr));
    return rcpp_result_gen;
END_RCPP
}
// SKAT_META_Optimal_Get_Q_Rcpp
Rcpp::List SKAT_META_Optimal_Get_Q_Rcpp(const arma::vec& Score, const arma::vec& r_all);
RcppExport SEXP _SAIGE_SKAT_META_Optimal_Get_Q_Rcpp(SEXP ScoreSEXP, SEXP r_allSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type Score(ScoreSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type r_all(r_allSEXP);
    rcpp_result_gen = Rcpp::wrap(SKAT_META_Optimal_Get_Q_Rcpp(Score, r_all));
    return rcpp_result_gen;
END_RCPP
}
// SKAT_META_Optimal_Get_Q_Res_Rcpp
Rcpp::List SKAT_META_Optimal_Get_Q_Res_Rcpp(const arma::mat& Score_res, const arma::vec& r_all);
RcppExport SEXP _SAIGE_SKAT_META_Optimal_Get_Q_Res_Rcpp(SEXP Score_resSEXP, SEXP r_allSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Score_res(Score_resSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type r_all(r_allSEXP);
    rcpp_result_gen = Rcpp::wrap(SKAT_META_Optimal_Get_Q_Res_Rcpp(Score_res, r_all));
    return rcpp_result_gen;
END_RCPP
}
// Get_Lambda_Rcpp
arma::vec Get_Lambda_Rcpp(const arma::mat& K, bool isFast, int maxK);
RcppExport SEXP _SAIGE_Get_Lambda_Rcpp(SEXP KSEXP, SEXP isFastSEXP, SEXP maxKSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type K(KSEXP);
    Rcpp::traits::input_parameter< bool >::type isFast(isFastSEXP);
    Rcpp::traits::input_parameter< int >::type maxK(maxKSEXP);
    rcpp_result_gen = Rcpp::wrap(Get_Lambda_Rcpp(K, isFast, maxK));
    return rcpp_result_gen;
END_RCPP
}
// SKAT_META_Optimal_Param_Rcpp
Rcpp::List SKAT_META_Optimal_Param_Rcpp(const arma::mat& Phi, const arma::vec& r_all);
RcppExport SEXP _SAIGE_SKAT_META_Optimal_Param_Rcpp(SEXP PhiSEXP, SEXP r_allSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Phi(PhiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type r_all(r_allSEXP);
    rcpp_result_gen = Rcpp::wrap(SKAT_META_Optimal_Param_Rcpp(Phi, r_all));
    return rcpp_result_gen;
END_RCPP
}
// SKAT_Optimal_Each_Q_Rcpp
Rcpp::List SKAT_Optimal_Each_Q_Rcpp(const arma::mat& Q_all, const arma::vec& r_all, const Rcpp::List& lambda_all, std::string method);
RcppExport SEXP _SAIGE_SKAT_Optimal_Each_Q_Rcpp(SEXP Q_allSEXP, SEXP r_allSEXP, SEXP lambda_allSEXP, SEXP methodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Q_all(Q_allSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type r_all(r_allSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type lambda_all(lambda_allSEXP);
    Rcpp::traits::input_parameter< std::string >::type method(methodSEXP);
    rcpp_result_gen = Rcpp::wrap(SKAT_Optimal_Each_Q_Rcpp(Q_all, r_all, lambda_all, method));
    return rcpp_result_gen;
END_RCPP
}
// Get_Liu_Params_Mod_Rcpp
Rcpp::List Get_Liu_Params_Mod_Rcpp(const arma::vec& c1);
RcppExport SEXP _SAIGE_Get_Liu_Params_Mod_Rcpp(SEXP c1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type c1(c1SEXP);
    rcpp_result_gen = Rcpp::wrap(Get_Liu_Params_Mod_Rcpp(c1));
    return rcpp_result_gen;
END_RCPP
}
// SKAT_Optimal_Integrate_Func_Davies_Rcpp
arma::vec SKAT_Optimal_Integrate_Func_Davies_Rcpp(const arma::vec& x, const arma::vec& pmin_q, arma::vec& tau, double MuQ, arma::vec& lambda, double VarQ, double VarRemain, const arma::vec& r_all);
RcppExport SEXP _SAIGE_SKAT_Optimal_Integrate_Func_Davies_Rcpp(SEXP xSEXP, SEXP pmin_qSEXP, SEXP tauSEXP, SEXP MuQSEXP, SEXP lambdaSEXP, SEXP VarQSEXP, SEXP VarRemainSEXP, SEXP r_allSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type pmin_q(pmin_qSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< double >::type MuQ(MuQSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type VarQ(VarQSEXP);
    Rcpp::traits::input_parameter< double >::type VarRemain(VarRemainSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type r_all(r_allSEXP);
    rcpp_result_gen = Rcpp::wrap(SKAT_Optimal_Integrate_Func_Davies_Rcpp(x, pmin_q, tau, MuQ, lambda, VarQ, VarRemain, r_all));
    return rcpp_result_gen;
END_RCPP
}
// SKAT_Optimal_Integrate_Func_single_Davies_Rcpp
double SKAT_Optimal_Integrate_Func_single_Davies_Rcpp(double x, arma::vec& pmin_q, arma::vec& tau, double MuQ, arma::vec& lambda, double VarQ, double VarRemain, arma::vec& r_all);
RcppExport SEXP _SAIGE_SKAT_Optimal_Integrate_Func_single_Davies_Rcpp(SEXP xSEXP, SEXP pmin_qSEXP, SEXP tauSEXP, SEXP MuQSEXP, SEXP lambdaSEXP, SEXP VarQSEXP, SEXP VarRemainSEXP, SEXP r_allSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type pmin_q(pmin_qSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< double >::type MuQ(MuQSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type VarQ(VarQSEXP);
    Rcpp::traits::input_parameter< double >::type VarRemain(VarRemainSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type r_all(r_allSEXP);
    rcpp_result_gen = Rcpp::wrap(SKAT_Optimal_Integrate_Func_single_Davies_Rcpp(x, pmin_q, tau, MuQ, lambda, VarQ, VarRemain, r_all));
    return rcpp_result_gen;
END_RCPP
}
// Get_Liu_Params_Mod_Lambda_Rcpp
Rcpp::List Get_Liu_Params_Mod_Lambda_Rcpp(const arma::vec& lambda, arma::vec& df1);
RcppExport SEXP _SAIGE_Get_Liu_Params_Mod_Lambda_Rcpp(SEXP lambdaSEXP, SEXP df1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type df1(df1SEXP);
    rcpp_result_gen = Rcpp::wrap(Get_Liu_Params_Mod_Lambda_Rcpp(lambda, df1));
    return rcpp_result_gen;
END_RCPP
}
// Get_Liu_PVal_MOD_Lambda_Zero_Rcpp
std::string Get_Liu_PVal_MOD_Lambda_Zero_Rcpp(double Q, double muQ, double muX, double sigmaQ, double sigmaX, double l, double d);
RcppExport SEXP _SAIGE_Get_Liu_PVal_MOD_Lambda_Zero_Rcpp(SEXP QSEXP, SEXP muQSEXP, SEXP muXSEXP, SEXP sigmaQSEXP, SEXP sigmaXSEXP, SEXP lSEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type Q(QSEXP);
    Rcpp::traits::input_parameter< double >::type muQ(muQSEXP);
    Rcpp::traits::input_parameter< double >::type muX(muXSEXP);
    Rcpp::traits::input_parameter< double >::type sigmaQ(sigmaQSEXP);
    Rcpp::traits::input_parameter< double >::type sigmaX(sigmaXSEXP);
    Rcpp::traits::input_parameter< double >::type l(lSEXP);
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(Get_Liu_PVal_MOD_Lambda_Zero_Rcpp(Q, muQ, muX, sigmaQ, sigmaX, l, d));
    return rcpp_result_gen;
END_RCPP
}
// Get_Liu_PVal_MOD_Lambda_Rcpp
arma::vec Get_Liu_PVal_MOD_Lambda_Rcpp(const arma::vec& Q_all, const arma::vec& lambda, arma::vec& df1, bool log_p);
RcppExport SEXP _SAIGE_Get_Liu_PVal_MOD_Lambda_Rcpp(SEXP Q_allSEXP, SEXP lambdaSEXP, SEXP df1SEXP, SEXP log_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type Q_all(Q_allSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type df1(df1SEXP);
    Rcpp::traits::input_parameter< bool >::type log_p(log_pSEXP);
    rcpp_result_gen = Rcpp::wrap(Get_Liu_PVal_MOD_Lambda_Rcpp(Q_all, lambda, df1, log_p));
    return rcpp_result_gen;
END_RCPP
}
// Get_PValue_Lambda_Rcpp
Rcpp::List Get_PValue_Lambda_Rcpp(arma::vec lambda, arma::vec Q, arma::vec df1);
RcppExport SEXP _SAIGE_Get_PValue_Lambda_Rcpp(SEXP lambdaSEXP, SEXP QSEXP, SEXP df1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Q(QSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type df1(df1SEXP);
    rcpp_result_gen = Rcpp::wrap(Get_PValue_Lambda_Rcpp(lambda, Q, df1));
    return rcpp_result_gen;
END_RCPP
}
// Get_Liu_PVal_Rcpp
Rcpp::List Get_Liu_PVal_Rcpp(const arma::mat& Q, const arma::mat& W, const arma::mat& Q_resampling);
RcppExport SEXP _SAIGE_Get_Liu_PVal_Rcpp(SEXP QSEXP, SEXP WSEXP, SEXP Q_resamplingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Q(QSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Q_resampling(Q_resamplingSEXP);
    rcpp_result_gen = Rcpp::wrap(Get_Liu_PVal_Rcpp(Q, W, Q_resampling));
    return rcpp_result_gen;
END_RCPP
}
// Get_Liu_Params_Rcpp
Rcpp::List Get_Liu_Params_Rcpp(const arma::vec& c1);
RcppExport SEXP _SAIGE_Get_Liu_Params_Rcpp(SEXP c1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type c1(c1SEXP);
    rcpp_result_gen = Rcpp::wrap(Get_Liu_Params_Rcpp(c1));
    return rcpp_result_gen;
END_RCPP
}
// SPA
void SPA(arma::vec& mu, arma::vec& g, double q, double qinv, double pval_noadj, double tol, bool logp, std::string traitType, double& pval, bool& isSPAConverge);
RcppExport SEXP _SAIGE_SPA(SEXP muSEXP, SEXP gSEXP, SEXP qSEXP, SEXP qinvSEXP, SEXP pval_noadjSEXP, SEXP tolSEXP, SEXP logpSEXP, SEXP traitTypeSEXP, SEXP pvalSEXP, SEXP isSPAConvergeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type g(gSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    Rcpp::traits::input_parameter< double >::type qinv(qinvSEXP);
    Rcpp::traits::input_parameter< double >::type pval_noadj(pval_noadjSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< bool >::type logp(logpSEXP);
    Rcpp::traits::input_parameter< std::string >::type traitType(traitTypeSEXP);
    Rcpp::traits::input_parameter< double& >::type pval(pvalSEXP);
    Rcpp::traits::input_parameter< bool& >::type isSPAConverge(isSPAConvergeSEXP);
    SPA(mu, g, q, qinv, pval_noadj, tol, logp, traitType, pval, isSPAConverge);
    return R_NilValue;
END_RCPP
}
// SPA_fast
void SPA_fast(arma::vec& mu, arma::vec& g, double q, double qinv, double pval_noadj, bool logp, arma::vec& gNA, arma::vec& gNB, arma::vec& muNA, arma::vec& muNB, double NAmu, double NAsigma, double tol, std::string traitType, double& pval, bool& isSPAConverge);
RcppExport SEXP _SAIGE_SPA_fast(SEXP muSEXP, SEXP gSEXP, SEXP qSEXP, SEXP qinvSEXP, SEXP pval_noadjSEXP, SEXP logpSEXP, SEXP gNASEXP, SEXP gNBSEXP, SEXP muNASEXP, SEXP muNBSEXP, SEXP NAmuSEXP, SEXP NAsigmaSEXP, SEXP tolSEXP, SEXP traitTypeSEXP, SEXP pvalSEXP, SEXP isSPAConvergeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type g(gSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    Rcpp::traits::input_parameter< double >::type qinv(qinvSEXP);
    Rcpp::traits::input_parameter< double >::type pval_noadj(pval_noadjSEXP);
    Rcpp::traits::input_parameter< bool >::type logp(logpSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type gNA(gNASEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type gNB(gNBSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type muNA(muNASEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type muNB(muNBSEXP);
    Rcpp::traits::input_parameter< double >::type NAmu(NAmuSEXP);
    Rcpp::traits::input_parameter< double >::type NAsigma(NAsigmaSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< std::string >::type traitType(traitTypeSEXP);
    Rcpp::traits::input_parameter< double& >::type pval(pvalSEXP);
    Rcpp::traits::input_parameter< bool& >::type isSPAConverge(isSPAConvergeSEXP);
    SPA_fast(mu, g, q, qinv, pval_noadj, logp, gNA, gNB, muNA, muNB, NAmu, NAsigma, tol, traitType, pval, isSPAConverge);
    return R_NilValue;
END_RCPP
}
// Korg_Binom
double Korg_Binom(double t1, arma::vec& mu, arma::vec& g);
RcppExport SEXP _SAIGE_Korg_Binom(SEXP t1SEXP, SEXP muSEXP, SEXP gSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type t1(t1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type g(gSEXP);
    rcpp_result_gen = Rcpp::wrap(Korg_Binom(t1, mu, g));
    return rcpp_result_gen;
END_RCPP
}
// K1_adj_Binom
double K1_adj_Binom(double t1, arma::vec& mu, arma::vec& g, double q);
RcppExport SEXP _SAIGE_K1_adj_Binom(SEXP t1SEXP, SEXP muSEXP, SEXP gSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type t1(t1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type g(gSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(K1_adj_Binom(t1, mu, g, q));
    return rcpp_result_gen;
END_RCPP
}
// K2_Binom
double K2_Binom(double t1, arma::vec& mu, arma::vec& g);
RcppExport SEXP _SAIGE_K2_Binom(SEXP t1SEXP, SEXP muSEXP, SEXP gSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type t1(t1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type g(gSEXP);
    rcpp_result_gen = Rcpp::wrap(K2_Binom(t1, mu, g));
    return rcpp_result_gen;
END_RCPP
}
// getroot_K1_Binom
Rcpp::List getroot_K1_Binom(double init, arma::vec& mu, arma::vec& g, double q, double tol, int maxiter);
RcppExport SEXP _SAIGE_getroot_K1_Binom(SEXP initSEXP, SEXP muSEXP, SEXP gSEXP, SEXP qSEXP, SEXP tolSEXP, SEXP maxiterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type init(initSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type g(gSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    rcpp_result_gen = Rcpp::wrap(getroot_K1_Binom(init, mu, g, q, tol, maxiter));
    return rcpp_result_gen;
END_RCPP
}
// Get_Saddle_Prob_Binom
Rcpp::List Get_Saddle_Prob_Binom(double zeta, arma::vec& mu, arma::vec& g, double q, bool logp);
RcppExport SEXP _SAIGE_Get_Saddle_Prob_Binom(SEXP zetaSEXP, SEXP muSEXP, SEXP gSEXP, SEXP qSEXP, SEXP logpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type zeta(zetaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type g(gSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    Rcpp::traits::input_parameter< bool >::type logp(logpSEXP);
    rcpp_result_gen = Rcpp::wrap(Get_Saddle_Prob_Binom(zeta, mu, g, q, logp));
    return rcpp_result_gen;
END_RCPP
}
// SPA_binary
Rcpp::List SPA_binary(arma::vec& mu, arma::vec& g, double q, double qinv, double pval_noadj, double tol, bool logp);
RcppExport SEXP _SAIGE_SPA_binary(SEXP muSEXP, SEXP gSEXP, SEXP qSEXP, SEXP qinvSEXP, SEXP pval_noadjSEXP, SEXP tolSEXP, SEXP logpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type g(gSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    Rcpp::traits::input_parameter< double >::type qinv(qinvSEXP);
    Rcpp::traits::input_parameter< double >::type pval_noadj(pval_noadjSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< bool >::type logp(logpSEXP);
    rcpp_result_gen = Rcpp::wrap(SPA_binary(mu, g, q, qinv, pval_noadj, tol, logp));
    return rcpp_result_gen;
END_RCPP
}
// Korg_fast_Binom
double Korg_fast_Binom(double t1, arma::vec& mu, arma::vec& g, arma::vec& gNA, arma::vec& gNB, arma::vec& muNA, arma::vec& muNB, double NAmu, double NAsigma);
RcppExport SEXP _SAIGE_Korg_fast_Binom(SEXP t1SEXP, SEXP muSEXP, SEXP gSEXP, SEXP gNASEXP, SEXP gNBSEXP, SEXP muNASEXP, SEXP muNBSEXP, SEXP NAmuSEXP, SEXP NAsigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type t1(t1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type g(gSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type gNA(gNASEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type gNB(gNBSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type muNA(muNASEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type muNB(muNBSEXP);
    Rcpp::traits::input_parameter< double >::type NAmu(NAmuSEXP);
    Rcpp::traits::input_parameter< double >::type NAsigma(NAsigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(Korg_fast_Binom(t1, mu, g, gNA, gNB, muNA, muNB, NAmu, NAsigma));
    return rcpp_result_gen;
END_RCPP
}
// K1_adj_fast_Binom
double K1_adj_fast_Binom(double t1, arma::vec& mu, arma::vec& g, double q, arma::vec& gNA, arma::vec& gNB, arma::vec& muNA, arma::vec& muNB, double NAmu, double NAsigma);
RcppExport SEXP _SAIGE_K1_adj_fast_Binom(SEXP t1SEXP, SEXP muSEXP, SEXP gSEXP, SEXP qSEXP, SEXP gNASEXP, SEXP gNBSEXP, SEXP muNASEXP, SEXP muNBSEXP, SEXP NAmuSEXP, SEXP NAsigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type t1(t1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type g(gSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type gNA(gNASEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type gNB(gNBSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type muNA(muNASEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type muNB(muNBSEXP);
    Rcpp::traits::input_parameter< double >::type NAmu(NAmuSEXP);
    Rcpp::traits::input_parameter< double >::type NAsigma(NAsigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(K1_adj_fast_Binom(t1, mu, g, q, gNA, gNB, muNA, muNB, NAmu, NAsigma));
    return rcpp_result_gen;
END_RCPP
}
// K2_fast_Binom
double K2_fast_Binom(double t1, arma::vec& mu, arma::vec& g, arma::vec& gNA, arma::vec& gNB, arma::vec& muNA, arma::vec& muNB, double NAmu, double NAsigma);
RcppExport SEXP _SAIGE_K2_fast_Binom(SEXP t1SEXP, SEXP muSEXP, SEXP gSEXP, SEXP gNASEXP, SEXP gNBSEXP, SEXP muNASEXP, SEXP muNBSEXP, SEXP NAmuSEXP, SEXP NAsigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type t1(t1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type g(gSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type gNA(gNASEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type gNB(gNBSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type muNA(muNASEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type muNB(muNBSEXP);
    Rcpp::traits::input_parameter< double >::type NAmu(NAmuSEXP);
    Rcpp::traits::input_parameter< double >::type NAsigma(NAsigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(K2_fast_Binom(t1, mu, g, gNA, gNB, muNA, muNB, NAmu, NAsigma));
    return rcpp_result_gen;
END_RCPP
}
// getroot_K1_fast_Binom
Rcpp::List getroot_K1_fast_Binom(double init, arma::vec& mu, arma::vec& g, double q, arma::vec& gNA, arma::vec& gNB, arma::vec& muNA, arma::vec& muNB, double NAmu, double NAsigma, double tol, int maxiter);
RcppExport SEXP _SAIGE_getroot_K1_fast_Binom(SEXP initSEXP, SEXP muSEXP, SEXP gSEXP, SEXP qSEXP, SEXP gNASEXP, SEXP gNBSEXP, SEXP muNASEXP, SEXP muNBSEXP, SEXP NAmuSEXP, SEXP NAsigmaSEXP, SEXP tolSEXP, SEXP maxiterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type init(initSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type g(gSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type gNA(gNASEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type gNB(gNBSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type muNA(muNASEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type muNB(muNBSEXP);
    Rcpp::traits::input_parameter< double >::type NAmu(NAmuSEXP);
    Rcpp::traits::input_parameter< double >::type NAsigma(NAsigmaSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    rcpp_result_gen = Rcpp::wrap(getroot_K1_fast_Binom(init, mu, g, q, gNA, gNB, muNA, muNB, NAmu, NAsigma, tol, maxiter));
    return rcpp_result_gen;
END_RCPP
}
// Get_Saddle_Prob_fast_Binom
Rcpp::List Get_Saddle_Prob_fast_Binom(double zeta, arma::vec& mu, arma::vec& g, double q, arma::vec& gNA, arma::vec& gNB, arma::vec& muNA, arma::vec& muNB, double NAmu, double NAsigma, bool logp);
RcppExport SEXP _SAIGE_Get_Saddle_Prob_fast_Binom(SEXP zetaSEXP, SEXP muSEXP, SEXP gSEXP, SEXP qSEXP, SEXP gNASEXP, SEXP gNBSEXP, SEXP muNASEXP, SEXP muNBSEXP, SEXP NAmuSEXP, SEXP NAsigmaSEXP, SEXP logpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type zeta(zetaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type g(gSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type gNA(gNASEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type gNB(gNBSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type muNA(muNASEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type muNB(muNBSEXP);
    Rcpp::traits::input_parameter< double >::type NAmu(NAmuSEXP);
    Rcpp::traits::input_parameter< double >::type NAsigma(NAsigmaSEXP);
    Rcpp::traits::input_parameter< bool >::type logp(logpSEXP);
    rcpp_result_gen = Rcpp::wrap(Get_Saddle_Prob_fast_Binom(zeta, mu, g, q, gNA, gNB, muNA, muNB, NAmu, NAsigma, logp));
    return rcpp_result_gen;
END_RCPP
}
// SPA_binary_fast
Rcpp::List SPA_binary_fast(arma::vec& mu, arma::vec& g, double q, double qinv, double pval_noadj, bool logp, arma::vec& gNA, arma::vec& gNB, arma::vec& muNA, arma::vec& muNB, double NAmu, double NAsigma, double tol);
RcppExport SEXP _SAIGE_SPA_binary_fast(SEXP muSEXP, SEXP gSEXP, SEXP qSEXP, SEXP qinvSEXP, SEXP pval_noadjSEXP, SEXP logpSEXP, SEXP gNASEXP, SEXP gNBSEXP, SEXP muNASEXP, SEXP muNBSEXP, SEXP NAmuSEXP, SEXP NAsigmaSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type g(gSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    Rcpp::traits::input_parameter< double >::type qinv(qinvSEXP);
    Rcpp::traits::input_parameter< double >::type pval_noadj(pval_noadjSEXP);
    Rcpp::traits::input_parameter< bool >::type logp(logpSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type gNA(gNASEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type gNB(gNBSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type muNA(muNASEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type muNB(muNBSEXP);
    Rcpp::traits::input_parameter< double >::type NAmu(NAmuSEXP);
    Rcpp::traits::input_parameter< double >::type NAsigma(NAsigmaSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(SPA_binary_fast(mu, g, q, qinv, pval_noadj, logp, gNA, gNB, muNA, muNB, NAmu, NAsigma, tol));
    return rcpp_result_gen;
END_RCPP
}
// Korg_Poi
double Korg_Poi(double t1, arma::vec& mu, arma::vec& g);
RcppExport SEXP _SAIGE_Korg_Poi(SEXP t1SEXP, SEXP muSEXP, SEXP gSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type t1(t1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type g(gSEXP);
    rcpp_result_gen = Rcpp::wrap(Korg_Poi(t1, mu, g));
    return rcpp_result_gen;
END_RCPP
}
// K1_adj_Poi
double K1_adj_Poi(double t1, arma::vec& mu, arma::vec& g, double q);
RcppExport SEXP _SAIGE_K1_adj_Poi(SEXP t1SEXP, SEXP muSEXP, SEXP gSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type t1(t1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type g(gSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(K1_adj_Poi(t1, mu, g, q));
    return rcpp_result_gen;
END_RCPP
}
// K2_Poi
double K2_Poi(double t1, arma::vec& mu, arma::vec& g);
RcppExport SEXP _SAIGE_K2_Poi(SEXP t1SEXP, SEXP muSEXP, SEXP gSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type t1(t1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type g(gSEXP);
    rcpp_result_gen = Rcpp::wrap(K2_Poi(t1, mu, g));
    return rcpp_result_gen;
END_RCPP
}
// getroot_K1_Poi
Rcpp::List getroot_K1_Poi(double init, arma::vec& mu, arma::vec& g, double q, double tol, int maxiter);
RcppExport SEXP _SAIGE_getroot_K1_Poi(SEXP initSEXP, SEXP muSEXP, SEXP gSEXP, SEXP qSEXP, SEXP tolSEXP, SEXP maxiterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type init(initSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type g(gSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    rcpp_result_gen = Rcpp::wrap(getroot_K1_Poi(init, mu, g, q, tol, maxiter));
    return rcpp_result_gen;
END_RCPP
}
// Get_Saddle_Prob_Poi
Rcpp::List Get_Saddle_Prob_Poi(double zeta, arma::vec& mu, arma::vec& g, double q, bool logp);
RcppExport SEXP _SAIGE_Get_Saddle_Prob_Poi(SEXP zetaSEXP, SEXP muSEXP, SEXP gSEXP, SEXP qSEXP, SEXP logpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type zeta(zetaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type g(gSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    Rcpp::traits::input_parameter< bool >::type logp(logpSEXP);
    rcpp_result_gen = Rcpp::wrap(Get_Saddle_Prob_Poi(zeta, mu, g, q, logp));
    return rcpp_result_gen;
END_RCPP
}
// SPA_survival
Rcpp::List SPA_survival(arma::vec& mu, arma::vec& g, double q, double qinv, double pval_noadj, double tol, bool logp);
RcppExport SEXP _SAIGE_SPA_survival(SEXP muSEXP, SEXP gSEXP, SEXP qSEXP, SEXP qinvSEXP, SEXP pval_noadjSEXP, SEXP tolSEXP, SEXP logpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type g(gSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    Rcpp::traits::input_parameter< double >::type qinv(qinvSEXP);
    Rcpp::traits::input_parameter< double >::type pval_noadj(pval_noadjSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< bool >::type logp(logpSEXP);
    rcpp_result_gen = Rcpp::wrap(SPA_survival(mu, g, q, qinv, pval_noadj, tol, logp));
    return rcpp_result_gen;
END_RCPP
}
// Korg_fast_Poi
double Korg_fast_Poi(double t1, arma::vec& mu, arma::vec& g, arma::vec& gNA, arma::vec& gNB, arma::vec& muNA, arma::vec& muNB, double NAmu, double NAsigma);
RcppExport SEXP _SAIGE_Korg_fast_Poi(SEXP t1SEXP, SEXP muSEXP, SEXP gSEXP, SEXP gNASEXP, SEXP gNBSEXP, SEXP muNASEXP, SEXP muNBSEXP, SEXP NAmuSEXP, SEXP NAsigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type t1(t1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type g(gSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type gNA(gNASEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type gNB(gNBSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type muNA(muNASEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type muNB(muNBSEXP);
    Rcpp::traits::input_parameter< double >::type NAmu(NAmuSEXP);
    Rcpp::traits::input_parameter< double >::type NAsigma(NAsigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(Korg_fast_Poi(t1, mu, g, gNA, gNB, muNA, muNB, NAmu, NAsigma));
    return rcpp_result_gen;
END_RCPP
}
// K1_adj_fast_Poi
double K1_adj_fast_Poi(double t1, arma::vec& mu, arma::vec& g, double q, arma::vec& gNA, arma::vec& gNB, arma::vec& muNA, arma::vec& muNB, double NAmu, double NAsigma);
RcppExport SEXP _SAIGE_K1_adj_fast_Poi(SEXP t1SEXP, SEXP muSEXP, SEXP gSEXP, SEXP qSEXP, SEXP gNASEXP, SEXP gNBSEXP, SEXP muNASEXP, SEXP muNBSEXP, SEXP NAmuSEXP, SEXP NAsigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type t1(t1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type g(gSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type gNA(gNASEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type gNB(gNBSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type muNA(muNASEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type muNB(muNBSEXP);
    Rcpp::traits::input_parameter< double >::type NAmu(NAmuSEXP);
    Rcpp::traits::input_parameter< double >::type NAsigma(NAsigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(K1_adj_fast_Poi(t1, mu, g, q, gNA, gNB, muNA, muNB, NAmu, NAsigma));
    return rcpp_result_gen;
END_RCPP
}
// K2_fast_Poi
double K2_fast_Poi(double t1, arma::vec& mu, arma::vec& g, arma::vec& gNA, arma::vec& gNB, arma::vec& muNA, arma::vec& muNB, double NAmu, double NAsigma);
RcppExport SEXP _SAIGE_K2_fast_Poi(SEXP t1SEXP, SEXP muSEXP, SEXP gSEXP, SEXP gNASEXP, SEXP gNBSEXP, SEXP muNASEXP, SEXP muNBSEXP, SEXP NAmuSEXP, SEXP NAsigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type t1(t1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type g(gSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type gNA(gNASEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type gNB(gNBSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type muNA(muNASEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type muNB(muNBSEXP);
    Rcpp::traits::input_parameter< double >::type NAmu(NAmuSEXP);
    Rcpp::traits::input_parameter< double >::type NAsigma(NAsigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(K2_fast_Poi(t1, mu, g, gNA, gNB, muNA, muNB, NAmu, NAsigma));
    return rcpp_result_gen;
END_RCPP
}
// getroot_K1_fast_Poi
Rcpp::List getroot_K1_fast_Poi(double init, arma::vec& mu, arma::vec& g, double q, arma::vec& gNA, arma::vec& gNB, arma::vec& muNA, arma::vec& muNB, double NAmu, double NAsigma, double tol, int maxiter);
RcppExport SEXP _SAIGE_getroot_K1_fast_Poi(SEXP initSEXP, SEXP muSEXP, SEXP gSEXP, SEXP qSEXP, SEXP gNASEXP, SEXP gNBSEXP, SEXP muNASEXP, SEXP muNBSEXP, SEXP NAmuSEXP, SEXP NAsigmaSEXP, SEXP tolSEXP, SEXP maxiterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type init(initSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type g(gSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type gNA(gNASEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type gNB(gNBSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type muNA(muNASEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type muNB(muNBSEXP);
    Rcpp::traits::input_parameter< double >::type NAmu(NAmuSEXP);
    Rcpp::traits::input_parameter< double >::type NAsigma(NAsigmaSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    rcpp_result_gen = Rcpp::wrap(getroot_K1_fast_Poi(init, mu, g, q, gNA, gNB, muNA, muNB, NAmu, NAsigma, tol, maxiter));
    return rcpp_result_gen;
END_RCPP
}
// Get_Saddle_Prob_fast_Poi
Rcpp::List Get_Saddle_Prob_fast_Poi(double zeta, arma::vec& mu, arma::vec& g, double q, arma::vec& gNA, arma::vec& gNB, arma::vec& muNA, arma::vec& muNB, double NAmu, double NAsigma, bool logp);
RcppExport SEXP _SAIGE_Get_Saddle_Prob_fast_Poi(SEXP zetaSEXP, SEXP muSEXP, SEXP gSEXP, SEXP qSEXP, SEXP gNASEXP, SEXP gNBSEXP, SEXP muNASEXP, SEXP muNBSEXP, SEXP NAmuSEXP, SEXP NAsigmaSEXP, SEXP logpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type zeta(zetaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type g(gSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type gNA(gNASEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type gNB(gNBSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type muNA(muNASEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type muNB(muNBSEXP);
    Rcpp::traits::input_parameter< double >::type NAmu(NAmuSEXP);
    Rcpp::traits::input_parameter< double >::type NAsigma(NAsigmaSEXP);
    Rcpp::traits::input_parameter< bool >::type logp(logpSEXP);
    rcpp_result_gen = Rcpp::wrap(Get_Saddle_Prob_fast_Poi(zeta, mu, g, q, gNA, gNB, muNA, muNB, NAmu, NAsigma, logp));
    return rcpp_result_gen;
END_RCPP
}
// SPA_survival_fast
Rcpp::List SPA_survival_fast(arma::vec& mu, arma::vec& g, double q, double qinv, double pval_noadj, bool logp, arma::vec& gNA, arma::vec& gNB, arma::vec& muNA, arma::vec& muNB, double NAmu, double NAsigma, double tol);
RcppExport SEXP _SAIGE_SPA_survival_fast(SEXP muSEXP, SEXP gSEXP, SEXP qSEXP, SEXP qinvSEXP, SEXP pval_noadjSEXP, SEXP logpSEXP, SEXP gNASEXP, SEXP gNBSEXP, SEXP muNASEXP, SEXP muNBSEXP, SEXP NAmuSEXP, SEXP NAsigmaSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type g(gSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    Rcpp::traits::input_parameter< double >::type qinv(qinvSEXP);
    Rcpp::traits::input_parameter< double >::type pval_noadj(pval_noadjSEXP);
    Rcpp::traits::input_parameter< bool >::type logp(logpSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type gNA(gNASEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type gNB(gNBSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type muNA(muNASEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type muNB(muNBSEXP);
    Rcpp::traits::input_parameter< double >::type NAmu(NAmuSEXP);
    Rcpp::traits::input_parameter< double >::type NAsigma(NAsigmaSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(SPA_survival_fast(mu, g, q, qinv, pval_noadj, logp, gNA, gNB, muNA, muNB, NAmu, NAsigma, tol));
    return rcpp_result_gen;
END_RCPP
}
// sum_arma1
double sum_arma1(arma::vec& X);
RcppExport SEXP _SAIGE_sum_arma1(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(sum_arma1(X));
    return rcpp_result_gen;
END_RCPP
}
// add_logp
double add_logp(double p1, double p2);
RcppExport SEXP _SAIGE_add_logp(SEXP p1SEXP, SEXP p2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type p1(p1SEXP);
    Rcpp::traits::input_parameter< double >::type p2(p2SEXP);
    rcpp_result_gen = Rcpp::wrap(add_logp(p1, p2));
    return rcpp_result_gen;
END_RCPP
}
// mult_sp_sp_to_sp
arma::sp_mat mult_sp_sp_to_sp(const arma::sp_mat& a, const arma::sp_mat& b);
RcppExport SEXP _SAIGE_mult_sp_sp_to_sp(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(mult_sp_sp_to_sp(a, b));
    return rcpp_result_gen;
END_RCPP
}
// mult_sp_den_to_sp
arma::sp_mat mult_sp_den_to_sp(const arma::sp_mat& a, const arma::mat& b);
RcppExport SEXP _SAIGE_mult_sp_den_to_sp(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(mult_sp_den_to_sp(a, b));
    return rcpp_result_gen;
END_RCPP
}
// mult_den_sp_to_sp
arma::sp_mat mult_den_sp_to_sp(const arma::mat& a, const arma::sp_mat& b);
RcppExport SEXP _SAIGE_mult_den_sp_to_sp(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(mult_den_sp_to_sp(a, b));
    return rcpp_result_gen;
END_RCPP
}
// gen_sp
arma::sp_mat gen_sp(const arma::sp_mat& a);
RcppExport SEXP _SAIGE_gen_sp(SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(gen_sp(a));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_SAIGE_CCT_cpp", (DL_FUNC) &_SAIGE_CCT_cpp, 1},
    {"_SAIGE_setGlobalVarsInCPP_LDmat", (DL_FUNC) &_SAIGE_setGlobalVarsInCPP_LDmat, 10},
    {"_SAIGE_LDmatRegionInCPP", (DL_FUNC) &_SAIGE_LDmatRegionInCPP, 9},
    {"_SAIGE_openOutfile_single_LDmat", (DL_FUNC) &_SAIGE_openOutfile_single_LDmat, 1},
    {"_SAIGE_closeOutfile_single_LDmat", (DL_FUNC) &_SAIGE_closeOutfile_single_LDmat, 0},
    {"_SAIGE_setAssocTest_GlobalVarsInCPP", (DL_FUNC) &_SAIGE_setAssocTest_GlobalVarsInCPP, 9},
    {"_SAIGE_setAssocTest_GlobalVarsInCPP_GbyE", (DL_FUNC) &_SAIGE_setAssocTest_GlobalVarsInCPP_GbyE, 3},
    {"_SAIGE_setMarker_GlobalVarsInCPP", (DL_FUNC) &_SAIGE_setMarker_GlobalVarsInCPP, 2},
    {"_SAIGE_setRegion_GlobalVarsInCPP", (DL_FUNC) &_SAIGE_setRegion_GlobalVarsInCPP, 4},
    {"_SAIGE_mainMarkerInCPP", (DL_FUNC) &_SAIGE_mainMarkerInCPP, 7},
    {"_SAIGE_Unified_getSampleSizeinGeno", (DL_FUNC) &_SAIGE_Unified_getSampleSizeinGeno, 1},
    {"_SAIGE_Unified_getSampleSizeinAnalysis", (DL_FUNC) &_SAIGE_Unified_getSampleSizeinAnalysis, 1},
    {"_SAIGE_setPLINKobjInCPP", (DL_FUNC) &_SAIGE_setPLINKobjInCPP, 5},
    {"_SAIGE_setBGENobjInCPP", (DL_FUNC) &_SAIGE_setBGENobjInCPP, 5},
    {"_SAIGE_setVCFobjInCPP", (DL_FUNC) &_SAIGE_setVCFobjInCPP, 4},
    {"_SAIGE_setSAIGEobjInCPP", (DL_FUNC) &_SAIGE_setSAIGEobjInCPP, 40},
    {"_SAIGE_RegionSetUpConditional_binary_InCPP", (DL_FUNC) &_SAIGE_RegionSetUpConditional_binary_InCPP, 1},
    {"_SAIGE_mainRegionInCPP", (DL_FUNC) &_SAIGE_mainRegionInCPP, 24},
    {"_SAIGE_assign_conditionMarkers_factors", (DL_FUNC) &_SAIGE_assign_conditionMarkers_factors, 5},
    {"_SAIGE_assign_conditionMarkers_factors_binary_region", (DL_FUNC) &_SAIGE_assign_conditionMarkers_factors_binary_region, 1},
    {"_SAIGE_set_iterator_inVcf", (DL_FUNC) &_SAIGE_set_iterator_inVcf, 4},
    {"_SAIGE_check_Vcf_end", (DL_FUNC) &_SAIGE_check_Vcf_end, 0},
    {"_SAIGE_move_forward_iterator_Vcf", (DL_FUNC) &_SAIGE_move_forward_iterator_Vcf, 1},
    {"_SAIGE_fast_logistf_fit", (DL_FUNC) &_SAIGE_fast_logistf_fit, 14},
    {"_SAIGE_closeGenoFile", (DL_FUNC) &_SAIGE_closeGenoFile, 1},
    {"_SAIGE_openOutfile", (DL_FUNC) &_SAIGE_openOutfile, 2},
    {"_SAIGE_openOutfile_singleinGroup", (DL_FUNC) &_SAIGE_openOutfile_singleinGroup, 4},
    {"_SAIGE_openOutfile_single", (DL_FUNC) &_SAIGE_openOutfile_single, 5},
    {"_SAIGE_set_flagSparseGRM_cur_SAIGE", (DL_FUNC) &_SAIGE_set_flagSparseGRM_cur_SAIGE, 1},
    {"_SAIGE_set_flagSparseGRM_cur_SAIGE_org", (DL_FUNC) &_SAIGE_set_flagSparseGRM_cur_SAIGE_org, 0},
    {"_SAIGE_copy_singleInGroup", (DL_FUNC) &_SAIGE_copy_singleInGroup, 0},
    {"_SAIGE_set_dup_sample_index", (DL_FUNC) &_SAIGE_set_dup_sample_index, 1},
    {"_SAIGE_setupSparseGRM_new", (DL_FUNC) &_SAIGE_setupSparseGRM_new, 1},
    {"_SAIGE_getSparseSigma_new", (DL_FUNC) &_SAIGE_getSparseSigma_new, 0},
    {"_SAIGE_set_I_longl_mat", (DL_FUNC) &_SAIGE_set_I_longl_mat, 2},
    {"_SAIGE_set_I_longl_mat_SAIGEtest", (DL_FUNC) &_SAIGE_set_I_longl_mat_SAIGEtest, 2},
    {"_SAIGE_set_T_longl_mat", (DL_FUNC) &_SAIGE_set_T_longl_mat, 2},
    {"_SAIGE_set_T_longl_mat_SAIGEtest", (DL_FUNC) &_SAIGE_set_T_longl_mat_SAIGEtest, 2},
    {"_SAIGE_getCrossprodMatAndKin", (DL_FUNC) &_SAIGE_getCrossprodMatAndKin, 2},
    {"_SAIGE_getCrossprod_multiV", (DL_FUNC) &_SAIGE_getCrossprod_multiV, 4},
    {"_SAIGE_getDiagOfSigma_multiV", (DL_FUNC) &_SAIGE_getDiagOfSigma_multiV, 3},
    {"_SAIGE_gen_sp_Sigma_multiV", (DL_FUNC) &_SAIGE_gen_sp_Sigma_multiV, 2},
    {"_SAIGE_getPCG1ofSigmaAndVector_multiV", (DL_FUNC) &_SAIGE_getPCG1ofSigmaAndVector_multiV, 6},
    {"_SAIGE_set_seed", (DL_FUNC) &_SAIGE_set_seed, 1},
    {"_SAIGE_nb", (DL_FUNC) &_SAIGE_nb, 1},
    {"_SAIGE_setStartEndIndex", (DL_FUNC) &_SAIGE_setStartEndIndex, 3},
    {"_SAIGE_setStartEndIndexVec", (DL_FUNC) &_SAIGE_setStartEndIndexVec, 2},
    {"_SAIGE_calCV", (DL_FUNC) &_SAIGE_calCV, 1},
    {"_SAIGE_getSigma_X_multiV", (DL_FUNC) &_SAIGE_getSigma_X_multiV, 6},
    {"_SAIGE_getSigma_G_multiV", (DL_FUNC) &_SAIGE_getSigma_G_multiV, 6},
    {"_SAIGE_fitglmmaiRPCG_multiV", (DL_FUNC) &_SAIGE_fitglmmaiRPCG_multiV, 14},
    {"_SAIGE_getMeanDiagofKmat", (DL_FUNC) &_SAIGE_getMeanDiagofKmat, 1},
    {"_SAIGE_getAIScore_multiV", (DL_FUNC) &_SAIGE_getAIScore_multiV, 13},
    {"_SAIGE_GetTrace_multiV", (DL_FUNC) &_SAIGE_GetTrace_multiV, 11},
    {"_SAIGE_getCoefficients_multiV", (DL_FUNC) &_SAIGE_getCoefficients_multiV, 7},
    {"_SAIGE_setminMAC_VarianceRatio", (DL_FUNC) &_SAIGE_setminMAC_VarianceRatio, 3},
    {"_SAIGE_get_GRMdiagVec", (DL_FUNC) &_SAIGE_get_GRMdiagVec, 0},
    {"_SAIGE_setminMAFforGRM", (DL_FUNC) &_SAIGE_setminMAFforGRM, 1},
    {"_SAIGE_setmaxMissingRateforGRM", (DL_FUNC) &_SAIGE_setmaxMissingRateforGRM, 1},
    {"_SAIGE_set_Diagof_StdGeno_LOCO", (DL_FUNC) &_SAIGE_set_Diagof_StdGeno_LOCO, 0},
    {"_SAIGE_get_DiagofKin", (DL_FUNC) &_SAIGE_get_DiagofKin, 0},
    {"_SAIGE_parallelCrossProd_usingSubMarker", (DL_FUNC) &_SAIGE_parallelCrossProd_usingSubMarker, 1},
    {"_SAIGE_getCrossprodMatAndKin_usingSubMarker", (DL_FUNC) &_SAIGE_getCrossprodMatAndKin_usingSubMarker, 1},
    {"_SAIGE_parallelInnerProduct", (DL_FUNC) &_SAIGE_parallelInnerProduct, 2},
    {"_SAIGE_createSparseKin", (DL_FUNC) &_SAIGE_createSparseKin, 4},
    {"_SAIGE_refineKin", (DL_FUNC) &_SAIGE_refineKin, 1},
    {"_SAIGE_getColfromStdGenoMultiMarkersMat", (DL_FUNC) &_SAIGE_getColfromStdGenoMultiMarkersMat, 1},
    {"_SAIGE_getNColStdGenoMultiMarkersMat", (DL_FUNC) &_SAIGE_getNColStdGenoMultiMarkersMat, 0},
    {"_SAIGE_getNRowStdGenoMultiMarkersMat", (DL_FUNC) &_SAIGE_getNRowStdGenoMultiMarkersMat, 0},
    {"_SAIGE_setSubMarkerIndex", (DL_FUNC) &_SAIGE_setSubMarkerIndex, 1},
    {"_SAIGE_setRelatednessCutoff", (DL_FUNC) &_SAIGE_setRelatednessCutoff, 1},
    {"_SAIGE_innerProduct", (DL_FUNC) &_SAIGE_innerProduct, 2},
    {"_SAIGE_getDiagOfSigma_noV", (DL_FUNC) &_SAIGE_getDiagOfSigma_noV, 3},
    {"_SAIGE_getDiagOfSigma_V", (DL_FUNC) &_SAIGE_getDiagOfSigma_V, 3},
    {"_SAIGE_getCrossprod_noV", (DL_FUNC) &_SAIGE_getCrossprod_noV, 4},
    {"_SAIGE_getCrossprod_V", (DL_FUNC) &_SAIGE_getCrossprod_V, 4},
    {"_SAIGE_getPCG1ofSigmaAndVector_noV", (DL_FUNC) &_SAIGE_getPCG1ofSigmaAndVector_noV, 6},
    {"_SAIGE_getPCG1ofSigmaAndVector_V", (DL_FUNC) &_SAIGE_getPCG1ofSigmaAndVector_V, 6},
    {"_SAIGE_getSigma_G_V", (DL_FUNC) &_SAIGE_getSigma_G_V, 6},
    {"_SAIGE_getSigma_G_noV", (DL_FUNC) &_SAIGE_getSigma_G_noV, 6},
    {"_SAIGE_set_useGRMtoFitNULL", (DL_FUNC) &_SAIGE_set_useGRMtoFitNULL, 1},
    {"_SAIGE_set_isSparseGRM", (DL_FUNC) &_SAIGE_set_isSparseGRM, 1},
    {"_SAIGE_set_store_sigma", (DL_FUNC) &_SAIGE_set_store_sigma, 1},
    {"_SAIGE_set_num_Kmat", (DL_FUNC) &_SAIGE_set_num_Kmat, 1},
    {"_SAIGE_get_numofV", (DL_FUNC) &_SAIGE_get_numofV, 0},
    {"_SAIGE_set_covarianceidx_Mat", (DL_FUNC) &_SAIGE_set_covarianceidx_Mat, 0},
    {"_SAIGE_closeGenoFile_plink", (DL_FUNC) &_SAIGE_closeGenoFile_plink, 0},
    {"_SAIGE_gettotalMarker", (DL_FUNC) &_SAIGE_gettotalMarker, 0},
    {"_SAIGE_getAlleleFreqVec", (DL_FUNC) &_SAIGE_getAlleleFreqVec, 0},
    {"_SAIGE_getMACVec", (DL_FUNC) &_SAIGE_getMACVec, 0},
    {"_SAIGE_getMACVec_forVarRatio", (DL_FUNC) &_SAIGE_getMACVec_forVarRatio, 0},
    {"_SAIGE_getIndexVec_forVarRatio", (DL_FUNC) &_SAIGE_getIndexVec_forVarRatio, 0},
    {"_SAIGE_getIsVarRatioGeno", (DL_FUNC) &_SAIGE_getIsVarRatioGeno, 0},
    {"_SAIGE_getSubMarkerIndex", (DL_FUNC) &_SAIGE_getSubMarkerIndex, 0},
    {"_SAIGE_getQCdMarkerIndex", (DL_FUNC) &_SAIGE_getQCdMarkerIndex, 0},
    {"_SAIGE_getSubMarkerNum", (DL_FUNC) &_SAIGE_getSubMarkerNum, 0},
    {"_SAIGE_getNnomissingOut", (DL_FUNC) &_SAIGE_getNnomissingOut, 0},
    {"_SAIGE_getMsub_MAFge_minMAFtoConstructGRM", (DL_FUNC) &_SAIGE_getMsub_MAFge_minMAFtoConstructGRM, 0},
    {"_SAIGE_getMsub_MAFge_minMAFtoConstructGRM_singleChr", (DL_FUNC) &_SAIGE_getMsub_MAFge_minMAFtoConstructGRM_singleChr, 0},
    {"_SAIGE_Get_MultiMarkersBySample_StdGeno_Mat", (DL_FUNC) &_SAIGE_Get_MultiMarkersBySample_StdGeno_Mat, 0},
    {"_SAIGE_Get_MultiMarkersBySample_StdGeno", (DL_FUNC) &_SAIGE_Get_MultiMarkersBySample_StdGeno, 2},
    {"_SAIGE_parallelCrossProd", (DL_FUNC) &_SAIGE_parallelCrossProd, 1},
    {"_SAIGE_innerProductFun", (DL_FUNC) &_SAIGE_innerProductFun, 2},
    {"_SAIGE_parallelCrossProd_full", (DL_FUNC) &_SAIGE_parallelCrossProd_full, 2},
    {"_SAIGE_parallelCrossProd_LOCO", (DL_FUNC) &_SAIGE_parallelCrossProd_LOCO, 1},
    {"_SAIGE_printComb", (DL_FUNC) &_SAIGE_printComb, 1},
    {"_SAIGE_findIndiceRelatedSample", (DL_FUNC) &_SAIGE_findIndiceRelatedSample, 0},
    {"_SAIGE_parallelcalsparseGRM", (DL_FUNC) &_SAIGE_parallelcalsparseGRM, 1},
    {"_SAIGE_parallelsumTwoVec", (DL_FUNC) &_SAIGE_parallelsumTwoVec, 1},
    {"_SAIGE_setgenoNULL", (DL_FUNC) &_SAIGE_setgenoNULL, 0},
    {"_SAIGE_setgeno", (DL_FUNC) &_SAIGE_setgeno, 7},
    {"_SAIGE_Get_OneSNP_Geno", (DL_FUNC) &_SAIGE_Get_OneSNP_Geno, 1},
    {"_SAIGE_Get_OneSNP_Geno_forVarRatio", (DL_FUNC) &_SAIGE_Get_OneSNP_Geno_forVarRatio, 1},
    {"_SAIGE_Get_OneSNP_StdGeno", (DL_FUNC) &_SAIGE_Get_OneSNP_StdGeno, 1},
    {"_SAIGE_print_g_n_unique", (DL_FUNC) &_SAIGE_print_g_n_unique, 0},
    {"_SAIGE_get_sp_Sigma_to_R", (DL_FUNC) &_SAIGE_get_sp_Sigma_to_R, 0},
    {"_SAIGE_get_SKAT_pvalue_Rcpp", (DL_FUNC) &_SAIGE_get_SKAT_pvalue_Rcpp, 3},
    {"_SAIGE_mainMarkerInCPP_multi", (DL_FUNC) &_SAIGE_mainMarkerInCPP_multi, 7},
    {"_SAIGE_getOneMarkerID_VCF", (DL_FUNC) &_SAIGE_getOneMarkerID_VCF, 5},
    {"_SAIGE_SKAT_META_Optimal_Get_Q_Rcpp", (DL_FUNC) &_SAIGE_SKAT_META_Optimal_Get_Q_Rcpp, 2},
    {"_SAIGE_SKAT_META_Optimal_Get_Q_Res_Rcpp", (DL_FUNC) &_SAIGE_SKAT_META_Optimal_Get_Q_Res_Rcpp, 2},
    {"_SAIGE_Get_Lambda_Rcpp", (DL_FUNC) &_SAIGE_Get_Lambda_Rcpp, 3},
    {"_SAIGE_SKAT_META_Optimal_Param_Rcpp", (DL_FUNC) &_SAIGE_SKAT_META_Optimal_Param_Rcpp, 2},
    {"_SAIGE_SKAT_Optimal_Each_Q_Rcpp", (DL_FUNC) &_SAIGE_SKAT_Optimal_Each_Q_Rcpp, 4},
    {"_SAIGE_Get_Liu_Params_Mod_Rcpp", (DL_FUNC) &_SAIGE_Get_Liu_Params_Mod_Rcpp, 1},
    {"_SAIGE_SKAT_Optimal_Integrate_Func_Davies_Rcpp", (DL_FUNC) &_SAIGE_SKAT_Optimal_Integrate_Func_Davies_Rcpp, 8},
    {"_SAIGE_SKAT_Optimal_Integrate_Func_single_Davies_Rcpp", (DL_FUNC) &_SAIGE_SKAT_Optimal_Integrate_Func_single_Davies_Rcpp, 8},
    {"_SAIGE_Get_Liu_Params_Mod_Lambda_Rcpp", (DL_FUNC) &_SAIGE_Get_Liu_Params_Mod_Lambda_Rcpp, 2},
    {"_SAIGE_Get_Liu_PVal_MOD_Lambda_Zero_Rcpp", (DL_FUNC) &_SAIGE_Get_Liu_PVal_MOD_Lambda_Zero_Rcpp, 7},
    {"_SAIGE_Get_Liu_PVal_MOD_Lambda_Rcpp", (DL_FUNC) &_SAIGE_Get_Liu_PVal_MOD_Lambda_Rcpp, 4},
    {"_SAIGE_Get_PValue_Lambda_Rcpp", (DL_FUNC) &_SAIGE_Get_PValue_Lambda_Rcpp, 3},
    {"_SAIGE_Get_Liu_PVal_Rcpp", (DL_FUNC) &_SAIGE_Get_Liu_PVal_Rcpp, 3},
    {"_SAIGE_Get_Liu_Params_Rcpp", (DL_FUNC) &_SAIGE_Get_Liu_Params_Rcpp, 1},
    {"_SAIGE_SPA", (DL_FUNC) &_SAIGE_SPA, 10},
    {"_SAIGE_SPA_fast", (DL_FUNC) &_SAIGE_SPA_fast, 16},
    {"_SAIGE_Korg_Binom", (DL_FUNC) &_SAIGE_Korg_Binom, 3},
    {"_SAIGE_K1_adj_Binom", (DL_FUNC) &_SAIGE_K1_adj_Binom, 4},
    {"_SAIGE_K2_Binom", (DL_FUNC) &_SAIGE_K2_Binom, 3},
    {"_SAIGE_getroot_K1_Binom", (DL_FUNC) &_SAIGE_getroot_K1_Binom, 6},
    {"_SAIGE_Get_Saddle_Prob_Binom", (DL_FUNC) &_SAIGE_Get_Saddle_Prob_Binom, 5},
    {"_SAIGE_SPA_binary", (DL_FUNC) &_SAIGE_SPA_binary, 7},
    {"_SAIGE_Korg_fast_Binom", (DL_FUNC) &_SAIGE_Korg_fast_Binom, 9},
    {"_SAIGE_K1_adj_fast_Binom", (DL_FUNC) &_SAIGE_K1_adj_fast_Binom, 10},
    {"_SAIGE_K2_fast_Binom", (DL_FUNC) &_SAIGE_K2_fast_Binom, 9},
    {"_SAIGE_getroot_K1_fast_Binom", (DL_FUNC) &_SAIGE_getroot_K1_fast_Binom, 12},
    {"_SAIGE_Get_Saddle_Prob_fast_Binom", (DL_FUNC) &_SAIGE_Get_Saddle_Prob_fast_Binom, 11},
    {"_SAIGE_SPA_binary_fast", (DL_FUNC) &_SAIGE_SPA_binary_fast, 13},
    {"_SAIGE_Korg_Poi", (DL_FUNC) &_SAIGE_Korg_Poi, 3},
    {"_SAIGE_K1_adj_Poi", (DL_FUNC) &_SAIGE_K1_adj_Poi, 4},
    {"_SAIGE_K2_Poi", (DL_FUNC) &_SAIGE_K2_Poi, 3},
    {"_SAIGE_getroot_K1_Poi", (DL_FUNC) &_SAIGE_getroot_K1_Poi, 6},
    {"_SAIGE_Get_Saddle_Prob_Poi", (DL_FUNC) &_SAIGE_Get_Saddle_Prob_Poi, 5},
    {"_SAIGE_SPA_survival", (DL_FUNC) &_SAIGE_SPA_survival, 7},
    {"_SAIGE_Korg_fast_Poi", (DL_FUNC) &_SAIGE_Korg_fast_Poi, 9},
    {"_SAIGE_K1_adj_fast_Poi", (DL_FUNC) &_SAIGE_K1_adj_fast_Poi, 10},
    {"_SAIGE_K2_fast_Poi", (DL_FUNC) &_SAIGE_K2_fast_Poi, 9},
    {"_SAIGE_getroot_K1_fast_Poi", (DL_FUNC) &_SAIGE_getroot_K1_fast_Poi, 12},
    {"_SAIGE_Get_Saddle_Prob_fast_Poi", (DL_FUNC) &_SAIGE_Get_Saddle_Prob_fast_Poi, 11},
    {"_SAIGE_SPA_survival_fast", (DL_FUNC) &_SAIGE_SPA_survival_fast, 13},
    {"_SAIGE_sum_arma1", (DL_FUNC) &_SAIGE_sum_arma1, 1},
    {"_SAIGE_add_logp", (DL_FUNC) &_SAIGE_add_logp, 2},
    {"_SAIGE_mult_sp_sp_to_sp", (DL_FUNC) &_SAIGE_mult_sp_sp_to_sp, 2},
    {"_SAIGE_mult_sp_den_to_sp", (DL_FUNC) &_SAIGE_mult_sp_den_to_sp, 2},
    {"_SAIGE_mult_den_sp_to_sp", (DL_FUNC) &_SAIGE_mult_den_sp_to_sp, 2},
    {"_SAIGE_gen_sp", (DL_FUNC) &_SAIGE_gen_sp, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_SAIGE(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
